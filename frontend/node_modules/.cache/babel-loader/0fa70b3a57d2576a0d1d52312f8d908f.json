{"ast":null,"code":"var _jsxFileName = \"/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/Contribution/Sentence/index.js\",\n    _s = $RefreshSig$();\n\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport LoopIcon from '@material-ui/icons/Loop';\nimport ResetIcon from '@material-ui/icons/RotateLeft';\nimport SaveIcon from '@material-ui/icons/Save';\nimport InputCustom from 'components/UI/InputCustom';\nimport TopicSelect from 'components/UI/TopicSelect';\nimport { MAX } from 'constant';\nimport { SENTENCE_TOPICS } from 'constant/sentence-topics';\nimport PropTypes from 'prop-types';\nimport React, { useRef, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport InformationTooltip from '../Word/InformationTooltip';\nimport useStyle from '../Word/style';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = yup.object().shape({\n  sentence: yup.string().trim().required('Hãy nhập một câu bằng tiếng Anh vào đây').lowercase().max(MAX.SENTENCE_LEN, `Từ dài tối đã ${MAX.SENTENCE_LEN} ký tự`),\n  mean: yup.string().trim().lowercase().required('Hãy nhập những ý nghĩa của câu bằng tiếng Việt').max(MAX.SENTENCE_MEAN_LEN, `Từ dài tối đã ${MAX.SENTENCE_MEAN_LEN} ký tự`),\n  note: yup.string().max(MAX.SENTENCE_NOTE_LEN, `Ghi chú tối đa ${MAX.SENTENCE_NOTE_LEN} ký tự`)\n});\n\nconst ButtonWrapper = props => /*#__PURE__*/_jsxDEV(Grid, { ...props,\n  item: true,\n  xs: 12\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 38,\n  columnNumber: 34\n}, this);\n\n_c = ButtonWrapper;\n\nfunction SentenceContribution(_ref) {\n  _s();\n\n  var _errors$sentence, _errors$mean, _errors$note;\n\n  let {\n    submitting,\n    onSubmitForm\n  } = _ref;\n  const classes = useStyle();\n  const topics = useRef([]);\n  const [resetFlag, setResetFlag] = useState(0);\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    },\n    reset\n  } = useForm({\n    resolver: yupResolver(schema)\n  });\n\n  const onResetForm = () => {\n    topics.current = [];\n    setResetFlag(Math.random() + 1);\n    reset({\n      sentence: '',\n      mean: '',\n      note: ''\n    });\n  };\n\n  const handleSubmitForm = formData => {\n    onSubmitForm({ ...formData,\n      topics: topics.current\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: classes.title,\n      children: \"Th\\xEAm c\\xE2u giao ti\\u1EBFp hay m\\xE0 b\\u1EA1n bi\\u1EBFt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dyno-break\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(handleSubmitForm),\n      autoComplete: \"off\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        className: classes.grid,\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: [/*#__PURE__*/_jsxDEV(InputCustom, {\n            className: \"w-100\",\n            label: \"M\\u1ED9t c\\xE2u b\\u1EB1ng ti\\u1EBFng Anh (*)\",\n            multiline: true,\n            error: Boolean(errors.sentence),\n            inputProps: {\n              autoFocus: true,\n              className: classes.sentenceInput,\n              maxLength: MAX.SENTENCE_LEN,\n              name: 'sentence',\n              ...register('sentence')\n            } // onChange={(e) => handleCheckWordExistence(e, null)}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), errors.sentence && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-error\",\n            children: (_errors$sentence = errors.sentence) === null || _errors$sentence === void 0 ? void 0 : _errors$sentence.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: [/*#__PURE__*/_jsxDEV(InputCustom, {\n            className: \"w-100\",\n            label: \"Ngh\\u0129a c\\u1EE7a c\\xE2u b\\u1EB1ng ti\\u1EBFng Vi\\u1EBFt (*)\",\n            error: Boolean(errors.mean),\n            multiline: true,\n            inputProps: {\n              maxLength: MAX.SENTENCE_MEAN_LEN,\n              name: 'mean',\n              className: classes.sentenceInput,\n              ...register('mean')\n            },\n            endAdornment: /*#__PURE__*/_jsxDEV(InformationTooltip, {\n              title: \"Nh\\u1EADp nh\\u1EEFng ngh\\u0129a c\\u1EE7a c\\xE2u v\\u1EEBa nh\\u1EADp. Th\\xEAm nhi\\u1EC1u ngh\\u0129a b\\u1EB1ng c\\xE1ch xu\\u1ED1ng d\\xF2ng.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this) // onChange={(e) => handleCheckWordExistence(e, null)}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), errors.mean && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-error\",\n            children: (_errors$mean = errors.mean) === null || _errors$mean === void 0 ? void 0 : _errors$mean.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: [/*#__PURE__*/_jsxDEV(InputCustom, {\n            className: \"w-100\",\n            label: \"Th\\xEAm ghi ch\\xFA cho c\\xE2u tr\\xEAn (*)\",\n            error: Boolean(errors.note),\n            multiline: true,\n            inputProps: {\n              className: classes.sentenceInput,\n              maxLength: MAX.SENTENCE_NOTE_LEN,\n              name: 'note',\n              ...register('note')\n            },\n            endAdornment: /*#__PURE__*/_jsxDEV(InformationTooltip, {\n              title: \"Th\\xEAm c\\xE1c ghi ch\\xFA, c\\xF3 th\\u1EC3 l\\xE0 c\\u1EA5u tr\\xFAc c\\xE2u, c\\xE1ch d\\xF9ng, l\\u01B0u \\xFD, ...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this) // onChange={(e) => handleCheckWordExistence(e, null)}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), errors.note && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-error\",\n            children: (_errors$note = errors.note) === null || _errors$note === void 0 ? void 0 : _errors$note.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TopicSelect, {\n          buttonWrapper: ButtonWrapper,\n          tagsWrapper: ButtonWrapper,\n          topicList: SENTENCE_TOPICS,\n          onChange: v => topics.current = v,\n          resetFlag: resetFlag\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dyno-break\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-end jus-content-end pt-5 w-100\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          className: `${classes.btn} ${classes.btnReset}`,\n          color: \"secondary\",\n          endIcon: /*#__PURE__*/_jsxDEV(ResetIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 22\n          }, this),\n          variant: \"outlined\",\n          disabled: submitting,\n          onClick: onResetForm,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: `${classes.btn} _btn _btn-primary`,\n          disabled: submitting,\n          endIcon: submitting ? /*#__PURE__*/_jsxDEV(LoopIcon, {\n            className: \"ani-spin\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 28\n          }, this) : /*#__PURE__*/_jsxDEV(SaveIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 64\n          }, this),\n          variant: \"contained\",\n          children: \"Th\\xEAm c\\xE2u\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SentenceContribution, \"/VvN/d4o4bQUU5iT17zSkgJR31g=\", false, function () {\n  return [useStyle, useForm];\n});\n\n_c2 = SentenceContribution;\nSentenceContribution.propTypes = {\n  onSubmitForm: PropTypes.func,\n  submitting: PropTypes.bool\n};\nexport default SentenceContribution;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ButtonWrapper\");\n$RefreshReg$(_c2, \"SentenceContribution\");","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/Contribution/Sentence/index.js"],"names":["yupResolver","Button","Grid","LoopIcon","ResetIcon","SaveIcon","InputCustom","TopicSelect","MAX","SENTENCE_TOPICS","PropTypes","React","useRef","useState","useForm","yup","InformationTooltip","useStyle","schema","object","shape","sentence","string","trim","required","lowercase","max","SENTENCE_LEN","mean","SENTENCE_MEAN_LEN","note","SENTENCE_NOTE_LEN","ButtonWrapper","props","SentenceContribution","submitting","onSubmitForm","classes","topics","resetFlag","setResetFlag","register","handleSubmit","formState","errors","reset","resolver","onResetForm","current","Math","random","handleSubmitForm","formData","root","title","grid","Boolean","autoFocus","className","sentenceInput","maxLength","name","message","v","btn","btnReset","propTypes","func","bool"],"mappings":"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","sourcesContent":["import { yupResolver } from '@hookform/resolvers/yup';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport LoopIcon from '@material-ui/icons/Loop';\nimport ResetIcon from '@material-ui/icons/RotateLeft';\nimport SaveIcon from '@material-ui/icons/Save';\nimport InputCustom from 'components/UI/InputCustom';\nimport TopicSelect from 'components/UI/TopicSelect';\nimport { MAX } from 'constant';\nimport { SENTENCE_TOPICS } from 'constant/sentence-topics';\nimport PropTypes from 'prop-types';\nimport React, { useRef, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport InformationTooltip from '../Word/InformationTooltip';\nimport useStyle from '../Word/style';\n\nconst schema = yup.object().shape({\n  sentence: yup\n    .string()\n    .trim()\n    .required('Hãy nhập một câu bằng tiếng Anh vào đây')\n    .lowercase()\n    .max(MAX.SENTENCE_LEN, `Từ dài tối đã ${MAX.SENTENCE_LEN} ký tự`),\n  mean: yup\n    .string()\n    .trim()\n    .lowercase()\n    .required('Hãy nhập những ý nghĩa của câu bằng tiếng Việt')\n    .max(MAX.SENTENCE_MEAN_LEN, `Từ dài tối đã ${MAX.SENTENCE_MEAN_LEN} ký tự`),\n  note: yup\n    .string()\n    .max(\n      MAX.SENTENCE_NOTE_LEN,\n      `Ghi chú tối đa ${MAX.SENTENCE_NOTE_LEN} ký tự`,\n    ),\n});\nconst ButtonWrapper = (props) => <Grid {...props} item xs={12} />;\n\nfunction SentenceContribution({ submitting, onSubmitForm }) {\n  const classes = useStyle();\n  const topics = useRef([]);\n  const [resetFlag, setResetFlag] = useState(0);\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const onResetForm = () => {\n    topics.current = [];\n    setResetFlag(Math.random() + 1);\n    reset({ sentence: '', mean: '', note: '' });\n  };\n\n  const handleSubmitForm = (formData) => {\n    onSubmitForm({ ...formData, topics: topics.current });\n  };\n\n  return (\n    <div className={classes.root}>\n      <h1 className={classes.title}>Thêm câu giao tiếp hay mà bạn biết</h1>\n      <div className=\"dyno-break\"></div>\n\n      <form onSubmit={handleSubmit(handleSubmitForm)} autoComplete=\"off\">\n        <Grid className={classes.grid} container spacing={3}>\n          {/* new sentence */}\n          <Grid item xs={12}>\n            <InputCustom\n              className=\"w-100\"\n              label=\"Một câu bằng tiếng Anh (*)\"\n              multiline\n              error={Boolean(errors.sentence)}\n              inputProps={{\n                autoFocus: true,\n                className: classes.sentenceInput,\n                maxLength: MAX.SENTENCE_LEN,\n                name: 'sentence',\n\n                ...register('sentence'),\n              }}\n              // onChange={(e) => handleCheckWordExistence(e, null)}\n            />\n            {errors.sentence && (\n              <p className=\"text-error\">{errors.sentence?.message}</p>\n            )}\n          </Grid>\n\n          {/* mean sentence */}\n          <Grid item xs={12}>\n            <InputCustom\n              className=\"w-100\"\n              label=\"Nghĩa của câu bằng tiếng Viết (*)\"\n              error={Boolean(errors.mean)}\n              multiline\n              inputProps={{\n                maxLength: MAX.SENTENCE_MEAN_LEN,\n                name: 'mean',\n                className: classes.sentenceInput,\n                ...register('mean'),\n              }}\n              endAdornment={\n                <InformationTooltip title=\"Nhập những nghĩa của câu vừa nhập. Thêm nhiều nghĩa bằng cách xuống dòng.\" />\n              }\n              // onChange={(e) => handleCheckWordExistence(e, null)}\n            />\n            {errors.mean && (\n              <p className=\"text-error\">{errors.mean?.message}</p>\n            )}\n          </Grid>\n\n          {/* sentence note */}\n          <Grid item xs={12}>\n            <InputCustom\n              className=\"w-100\"\n              label=\"Thêm ghi chú cho câu trên (*)\"\n              error={Boolean(errors.note)}\n              multiline\n              inputProps={{\n                className: classes.sentenceInput,\n                maxLength: MAX.SENTENCE_NOTE_LEN,\n                name: 'note',\n                ...register('note'),\n              }}\n              endAdornment={\n                <InformationTooltip title=\"Thêm các ghi chú, có thể là cấu trúc câu, cách dùng, lưu ý, ...\" />\n              }\n              // onChange={(e) => handleCheckWordExistence(e, null)}\n            />\n            {errors.note && (\n              <p className=\"text-error\">{errors.note?.message}</p>\n            )}\n          </Grid>\n\n          {/* topics */}\n          <TopicSelect\n            buttonWrapper={ButtonWrapper}\n            tagsWrapper={ButtonWrapper}\n            topicList={SENTENCE_TOPICS}\n            onChange={(v) => (topics.current = v)}\n            resetFlag={resetFlag}\n          />\n        </Grid>\n\n        <div className=\"dyno-break\"></div>\n\n        {/* button group */}\n        <div className=\"d-flex flex-end jus-content-end pt-5 w-100\">\n          <Button\n            className={`${classes.btn} ${classes.btnReset}`}\n            color=\"secondary\"\n            endIcon={<ResetIcon />}\n            variant=\"outlined\"\n            disabled={submitting}\n            onClick={onResetForm}>\n            Reset\n          </Button>\n          <Button\n            type=\"submit\"\n            className={`${classes.btn} _btn _btn-primary`}\n            disabled={submitting}\n            endIcon={\n              submitting ? <LoopIcon className=\"ani-spin\" /> : <SaveIcon />\n            }\n            variant=\"contained\">\n            Thêm câu\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nSentenceContribution.propTypes = {\n  onSubmitForm: PropTypes.func,\n  submitting: PropTypes.bool,\n};\n\nexport default SentenceContribution;\n"]},"metadata":{},"sourceType":"module"}