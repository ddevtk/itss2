{"ast":null,"code":"var _jsxFileName = \"/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/LeaderBoard/data.js\",\n    _s = $RefreshSig$();\n\nimport highscoreApi from 'apis/highscoreApi';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport LeaderBoard from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LeaderBoardData(_ref) {\n  _s();\n\n  let {\n    color,\n    title,\n    nameId,\n    unit,\n    tooltip\n  } = _ref;\n  const [list, setList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        const apiRes = await highscoreApi.getLeaderboard(nameId);\n\n        if (apiRes.status === 200) {\n          const {\n            list = []\n          } = apiRes.data;\n          setLoading(false);\n          setList(list);\n        }\n      } catch (error) {}\n    })();\n\n    return () => isSub = false;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LeaderBoard, {\n    list: list,\n    loading: loading,\n    color: color,\n    title: title,\n    unit: unit,\n    tooltip: tooltip\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LeaderBoardData, \"r5kbw73MUR7jwt3v7LRe5+E0ZXA=\");\n\n_c = LeaderBoardData;\nLeaderBoardData.propTypes = {\n  color: PropTypes.string,\n  title: PropTypes.string,\n  nameId: PropTypes.string,\n  unit: PropTypes.string,\n  tooltip: PropTypes.string\n};\nexport default LeaderBoardData;\n\nvar _c;\n\n$RefreshReg$(_c, \"LeaderBoardData\");","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/LeaderBoard/data.js"],"names":["highscoreApi","PropTypes","React","useEffect","useState","LeaderBoard","LeaderBoardData","color","title","nameId","unit","tooltip","list","setList","loading","setLoading","isSub","apiRes","getLeaderboard","status","data","error","propTypes","string"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,mBAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,GAAxB;;;AAEA,SAASC,eAAT,OAAkE;AAAA;;AAAA,MAAzC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,MAAhB;AAAwBC,IAAAA,IAAxB;AAA8BC,IAAAA;AAA9B,GAAyC;AAChE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,KAAK,GAAG,IAAZ;;AAEA,KAAC,kBAAkB;AACjB,UAAI;AACF,cAAMC,MAAM,GAAG,MAAMjB,YAAY,CAACkB,cAAb,CAA4BT,MAA5B,CAArB;;AACA,YAAIQ,MAAM,CAACE,MAAP,KAAkB,GAAtB,EAA2B;AACzB,gBAAM;AAAEP,YAAAA,IAAI,GAAG;AAAT,cAAgBK,MAAM,CAACG,IAA7B;AACAL,UAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,UAAAA,OAAO,CAACD,IAAD,CAAP;AACD;AACF,OAPD,CAOE,OAAOS,KAAP,EAAc,CAAE;AACnB,KATD;;AAWA,WAAO,MAAOL,KAAK,GAAG,KAAtB;AACD,GAfQ,EAeN,EAfM,CAAT;AAiBA,sBACE,QAAC,WAAD;AACE,IAAA,IAAI,EAAEJ,IADR;AAEE,IAAA,OAAO,EAAEE,OAFX;AAGE,IAAA,KAAK,EAAEP,KAHT;AAIE,IAAA,KAAK,EAAEC,KAJT;AAKE,IAAA,IAAI,EAAEE,IALR;AAME,IAAA,OAAO,EAAEC;AANX;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GA/BQL,e;;KAAAA,e;AAiCTA,eAAe,CAACgB,SAAhB,GAA4B;AAC1Bf,EAAAA,KAAK,EAAEN,SAAS,CAACsB,MADS;AAE1Bf,EAAAA,KAAK,EAAEP,SAAS,CAACsB,MAFS;AAG1Bd,EAAAA,MAAM,EAAER,SAAS,CAACsB,MAHQ;AAI1Bb,EAAAA,IAAI,EAAET,SAAS,CAACsB,MAJU;AAK1BZ,EAAAA,OAAO,EAAEV,SAAS,CAACsB;AALO,CAA5B;AAQA,eAAejB,eAAf","sourcesContent":["import highscoreApi from 'apis/highscoreApi';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport LeaderBoard from '.';\n\nfunction LeaderBoardData({ color, title, nameId, unit, tooltip }) {\n  const [list, setList] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        const apiRes = await highscoreApi.getLeaderboard(nameId);\n        if (apiRes.status === 200) {\n          const { list = [] } = apiRes.data;\n          setLoading(false);\n          setList(list);\n        }\n      } catch (error) {}\n    })();\n\n    return () => (isSub = false);\n  }, []);\n\n  return (\n    <LeaderBoard\n      list={list}\n      loading={loading}\n      color={color}\n      title={title}\n      unit={unit}\n      tooltip={tooltip}\n    />\n  );\n}\n\nLeaderBoardData.propTypes = {\n  color: PropTypes.string,\n  title: PropTypes.string,\n  nameId: PropTypes.string,\n  unit: PropTypes.string,\n  tooltip: PropTypes.string,\n};\n\nexport default LeaderBoardData;\n"]},"metadata":{},"sourceType":"module"}