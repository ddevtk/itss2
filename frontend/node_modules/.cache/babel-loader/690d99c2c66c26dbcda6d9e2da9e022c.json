{"ast":null,"code":"var _jsxFileName = \"/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/UserAccount/data.js\",\n    _s = $RefreshSig$();\n\nimport accountApi from 'apis/accountApi';\nimport { formatDate } from 'helper';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setMessage } from 'redux/slices/message.slice';\nimport { setUserAvt } from 'redux/slices/userInfo.slice';\nimport UserAccount from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UserAccountData() {\n  _s();\n\n  const [userInfo, setUserInfo] = useState({\n    email: null,\n    createdDate: null\n  });\n  const dispatch = useDispatch();\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        const apiRes = await accountApi.getUserProfile();\n\n        if (apiRes.status === 200 && isSub) {\n          const {\n            email,\n            createdDate\n          } = apiRes.data;\n          setUserInfo({\n            email,\n            createdDate: formatDate(createdDate)\n          });\n        }\n      } catch (error) {}\n    })();\n\n    return () => isSub = false;\n  }, []);\n\n  const handleUploadAvt = async src => {\n    try {\n      const apiRes = await accountApi.putUpdateAvt(src);\n\n      if (apiRes.status === 200) {\n        dispatch(setMessage({\n          type: 'success',\n          message: 'Cập nhật ảnh đại diện thành công'\n        }));\n        dispatch(setUserAvt(apiRes.data.newSrc));\n      }\n    } catch (error) {\n      dispatch(setMessage({\n        type: 'error',\n        message: 'Cập nhật ảnh đại diện thất bại. Thử lại'\n      }));\n    }\n  };\n\n  const handleUpdateProfile = async (name, username) => {\n    try {\n      const apiRes = await accountApi.putUpdateProfile(name, username);\n\n      if (apiRes.status === 200) {\n        dispatch(setMessage({\n          type: 'success',\n          message: 'Cập nhật thông tin thành công',\n          duration: 500\n        }));\n        setTimeout(() => {\n          location.reload();\n        }, 750);\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Chỉnh sửa thông tin thất bại, thử lại !';\n      dispatch(setMessage({\n        type: 'error',\n        message\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserAccount, {\n    email: userInfo.email,\n    createdDate: userInfo.createdDate,\n    onUpload: handleUploadAvt,\n    onUpdateProfile: handleUpdateProfile\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UserAccountData, \"wUICHCFKWF10ioHJv8Hii3gl/3Q=\", false, function () {\n  return [useDispatch];\n});\n\n_c = UserAccountData;\nexport default UserAccountData;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserAccountData\");","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/UserAccount/data.js"],"names":["accountApi","formatDate","React","useEffect","useState","useDispatch","setMessage","setUserAvt","UserAccount","UserAccountData","userInfo","setUserInfo","email","createdDate","dispatch","isSub","apiRes","getUserProfile","status","data","error","handleUploadAvt","src","putUpdateAvt","type","message","newSrc","handleUpdateProfile","name","username","putUpdateProfile","duration","setTimeout","location","reload","response"],"mappings":"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","sourcesContent":["import accountApi from 'apis/accountApi';\nimport { formatDate } from 'helper';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setMessage } from 'redux/slices/message.slice';\nimport { setUserAvt } from 'redux/slices/userInfo.slice';\nimport UserAccount from '.';\n\nfunction UserAccountData() {\n  const [userInfo, setUserInfo] = useState({ email: null, createdDate: null });\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        const apiRes = await accountApi.getUserProfile();\n\n        if (apiRes.status === 200 && isSub) {\n          const { email, createdDate } = apiRes.data;\n          setUserInfo({ email, createdDate: formatDate(createdDate) });\n        }\n      } catch (error) {}\n    })();\n\n    return () => (isSub = false);\n  }, []);\n\n  const handleUploadAvt = async (src) => {\n    try {\n      const apiRes = await accountApi.putUpdateAvt(src);\n      if (apiRes.status === 200) {\n        dispatch(\n          setMessage({\n            type: 'success',\n            message: 'Cập nhật ảnh đại diện thành công',\n          }),\n        );\n\n        dispatch(setUserAvt(apiRes.data.newSrc));\n      }\n    } catch (error) {\n      dispatch(\n        setMessage({\n          type: 'error',\n          message: 'Cập nhật ảnh đại diện thất bại. Thử lại',\n        }),\n      );\n    }\n  };\n\n  const handleUpdateProfile = async (name, username) => {\n    try {\n      const apiRes = await accountApi.putUpdateProfile(name, username);\n      if (apiRes.status === 200) {\n        dispatch(\n          setMessage({\n            type: 'success',\n            message: 'Cập nhật thông tin thành công',\n            duration: 500,\n          }),\n        );\n\n        setTimeout(() => {\n          location.reload();\n        }, 750);\n      }\n    } catch (error) {\n      const message =\n        error.response?.data?.message ||\n        'Chỉnh sửa thông tin thất bại, thử lại !';\n      dispatch(setMessage({ type: 'error', message }));\n    }\n  };\n\n  return (\n    <UserAccount\n      email={userInfo.email}\n      createdDate={userInfo.createdDate}\n      onUpload={handleUploadAvt}\n      onUpdateProfile={handleUpdateProfile}\n    />\n  );\n}\n\nexport default UserAccountData;\n"]},"metadata":{},"sourceType":"module"}