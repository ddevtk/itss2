{"ast":null,"code":"var _jsxFileName = \"/Users/doviethoang/Desktop/github/dynonary-english/frontend/src/components/DynoDictionary/Favorite/data.js\",\n    _s = $RefreshSig$();\n\nimport wordApi from 'apis/wordApi';\nimport WordDetailModal from 'components/UI/WordDetailModal';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport FavoriteDictionary from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst perPage = 20;\n\nfunction FavoriteDictionaryData() {\n  _s();\n\n  const [page, setPage] = useState(1);\n  const [sortType, setSortType] = useState('rand');\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [more, setMore] = useState(true); // toggle infinite scrolling\n\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const {\n    favoriteList\n  } = useSelector(state => state.userInfo);\n  const totalPage = favoriteList.length;\n  const preSearchList = useRef([]);\n\n  const nextPage = () => {\n    if (page < totalPage) {\n      setPage(page + 1);\n    } else {\n      setMore(false);\n    }\n  };\n\n  const onSortTypeChange = function () {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'rand';\n    if (type === sortType) return;\n    preSearchList.current = [];\n    setSortType(type);\n    setPage(1);\n    setList([]);\n  };\n\n  const onSearchWord = async word => {\n    try {\n      if (word === '') {\n        setList(preSearchList.current);\n        setMore(true);\n        return;\n      }\n\n      const apiRes = await wordApi.getSearchWord(word);\n\n      if (apiRes.status === 200) {\n        const {\n          packList = []\n        } = apiRes.data;\n        setList(packList);\n        setMore(false);\n      }\n    } catch (error) {}\n  }; // get favorite list\n\n\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        setLoading(true);\n        const apiRes = await wordApi.getUserFavoriteList(page, perPage, sortType);\n\n        if (apiRes.status === 200 && isSub) {\n          const {\n            packList = []\n          } = apiRes.data;\n          const newList = [...list, ...packList];\n          preSearchList.current = newList;\n          setList(newList);\n        }\n      } catch (error) {} finally {\n        if (isSub) {\n          setLoading(false);\n          isFirstLoad && setIsFirstLoad(false);\n        }\n      }\n    })();\n\n    return () => isSub = false;\n  }, [page, sortType]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(FavoriteDictionary, {\n      list: list,\n      loading: loading,\n      onLoadData: nextPage,\n      more: more,\n      isFirstLoad: isFirstLoad,\n      onSortTypeChange: onSortTypeChange,\n      onSearchWord: onSearchWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WordDetailModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(FavoriteDictionaryData, \"BVrvjf+xBRZWtrmCAR8nMUkp2B0=\", false, function () {\n  return [useSelector];\n});\n\n_c = FavoriteDictionaryData;\nexport default FavoriteDictionaryData;\n\nvar _c;\n\n$RefreshReg$(_c, \"FavoriteDictionaryData\");","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-english/frontend/src/components/DynoDictionary/Favorite/data.js"],"names":["wordApi","WordDetailModal","React","useEffect","useRef","useState","useSelector","FavoriteDictionary","perPage","FavoriteDictionaryData","page","setPage","sortType","setSortType","loading","setLoading","list","setList","more","setMore","isFirstLoad","setIsFirstLoad","favoriteList","state","userInfo","totalPage","length","preSearchList","nextPage","onSortTypeChange","type","current","onSearchWord","word","apiRes","getSearchWord","status","packList","data","error","isSub","getUserFavoriteList","newList"],"mappings":"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","sourcesContent":["import wordApi from 'apis/wordApi';\nimport WordDetailModal from 'components/UI/WordDetailModal';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport FavoriteDictionary from '.';\n\nconst perPage = 20;\n\nfunction FavoriteDictionaryData() {\n  const [page, setPage] = useState(1);\n  const [sortType, setSortType] = useState('rand');\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [more, setMore] = useState(true); // toggle infinite scrolling\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const { favoriteList } = useSelector((state) => state.userInfo);\n  const totalPage = favoriteList.length;\n  const preSearchList = useRef([]);\n\n  const nextPage = () => {\n    if (page < totalPage) {\n      setPage(page + 1);\n    } else {\n      setMore(false);\n    }\n  };\n\n  const onSortTypeChange = (type = 'rand') => {\n    if (type === sortType) return;\n    preSearchList.current = [];\n    setSortType(type);\n    setPage(1);\n    setList([]);\n  };\n\n  const onSearchWord = async (word) => {\n    try {\n      if (word === '') {\n        setList(preSearchList.current);\n        setMore(true);\n        return;\n      }\n\n      const apiRes = await wordApi.getSearchWord(word);\n      if (apiRes.status === 200) {\n        const { packList = [] } = apiRes.data;\n        setList(packList);\n        setMore(false);\n      }\n    } catch (error) {}\n  };\n\n  // get favorite list\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        setLoading(true);\n        const apiRes = await wordApi.getUserFavoriteList(\n          page,\n          perPage,\n          sortType,\n        );\n        if (apiRes.status === 200 && isSub) {\n          const { packList = [] } = apiRes.data;\n          const newList = [...list, ...packList];\n          preSearchList.current = newList;\n          setList(newList);\n        }\n      } catch (error) {\n      } finally {\n        if (isSub) {\n          setLoading(false);\n          isFirstLoad && setIsFirstLoad(false);\n        }\n      }\n    })();\n\n    return () => (isSub = false);\n  }, [page, sortType]);\n\n  return (\n    <>\n      <FavoriteDictionary\n        list={list}\n        loading={loading}\n        onLoadData={nextPage}\n        more={more}\n        isFirstLoad={isFirstLoad}\n        onSortTypeChange={onSortTypeChange}\n        onSearchWord={onSearchWord}\n      />\n      <WordDetailModal />\n    </>\n  );\n}\n\nexport default FavoriteDictionaryData;\n"]},"metadata":{},"sourceType":"module"}