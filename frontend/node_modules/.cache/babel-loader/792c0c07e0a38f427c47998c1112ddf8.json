{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst messageSlice = createSlice({\n  name: 'message',\n  initialState: {\n    open: false,\n    duration: 2000,\n    message: 'This is a message',\n    variant: 'filled',\n    type: 'success'\n  },\n  reducers: {\n    setMessage(state, action) {\n      const {\n        payload\n      } = action;\n\n      if (typeof payload === 'string') {\n        return { ...state,\n          open: true,\n          message: payload\n        };\n      }\n\n      return { ...state,\n        open: true,\n        ...payload\n      };\n    },\n\n    closeMessage(state) {\n      state.open = false;\n    }\n\n  }\n});\nconst {\n  reducer,\n  actions\n} = messageSlice;\nexport const {\n  setMessage,\n  closeMessage\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/redux/slices/message.slice.js"],"names":["createSlice","messageSlice","name","initialState","open","duration","message","variant","type","reducers","setMessage","state","action","payload","closeMessage","reducer","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAGD,WAAW,CAAC;AAC/BE,EAAAA,IAAI,EAAE,SADyB;AAE/BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,IAAI,EAAE,KADM;AAEZC,IAAAA,QAAQ,EAAE,IAFE;AAGZC,IAAAA,OAAO,EAAE,mBAHG;AAIZC,IAAAA,OAAO,EAAE,QAJG;AAKZC,IAAAA,IAAI,EAAE;AALM,GAFiB;AAS/BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACxB,YAAM;AAAEC,QAAAA;AAAF,UAAcD,MAApB;;AAEA,UAAI,OAAOC,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,eAAO,EAAE,GAAGF,KAAL;AAAYP,UAAAA,IAAI,EAAE,IAAlB;AAAwBE,UAAAA,OAAO,EAAEO;AAAjC,SAAP;AACD;;AAED,aAAO,EAAE,GAAGF,KAAL;AAAYP,QAAAA,IAAI,EAAE,IAAlB;AAAwB,WAAGS;AAA3B,OAAP;AACD,KATO;;AAURC,IAAAA,YAAY,CAACH,KAAD,EAAQ;AAClBA,MAAAA,KAAK,CAACP,IAAN,GAAa,KAAb;AACD;;AAZO;AATqB,CAAD,CAAhC;AAyBA,MAAM;AAAEW,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBf,YAA7B;AACA,OAAO,MAAM;AAAES,EAAAA,UAAF;AAAcI,EAAAA;AAAd,IAA+BE,OAArC;AACP,eAAeD,OAAf","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst messageSlice = createSlice({\n  name: 'message',\n  initialState: {\n    open: false,\n    duration: 2000,\n    message: 'This is a message',\n    variant: 'filled',\n    type: 'success',\n  },\n  reducers: {\n    setMessage(state, action) {\n      const { payload } = action;\n\n      if (typeof payload === 'string') {\n        return { ...state, open: true, message: payload };\n      }\n\n      return { ...state, open: true, ...payload };\n    },\n    closeMessage(state) {\n      state.open = false;\n    },\n  },\n});\n\nconst { reducer, actions } = messageSlice;\nexport const { setMessage, closeMessage } = actions;\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}