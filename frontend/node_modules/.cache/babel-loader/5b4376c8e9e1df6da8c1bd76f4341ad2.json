{"ast":null,"code":"import axiosClient from './axiosClient';\nconst URL = '/word';\nconst wordApi = {\n  postContributeWord: wordInfor => {\n    return axiosClient.post(`${URL}/contribute/add-word`, { ...wordInfor\n    });\n  },\n  getCheckWordExistence: (word, type) => {\n    return axiosClient.get(`${URL}/exist`, {\n      params: {\n        word,\n        type\n      }\n    });\n  },\n  // get word, type, phonetic, mean\n  getWordList: function () {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let perPage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;\n    let packInfo = arguments.length > 2 ? arguments[2] : undefined;\n    let sortType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'rand';\n    return axiosClient.get(`${URL}/pack`, {\n      params: {\n        page,\n        perPage,\n        packInfo: JSON.stringify(packInfo),\n        sortType\n      }\n    });\n  },\n  getSearchWord: function () {\n    let word = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let isCompact = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return axiosClient.get(`${URL}/search-word`, {\n      params: {\n        word,\n        isCompact\n      }\n    });\n  },\n  getWordDetails: function () {\n    let word = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return axiosClient.get(`${URL}/word-details`, {\n      params: {\n        word\n      }\n    });\n  },\n  getUserFavoriteList: function () {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let perPage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;\n    let sortType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'rand';\n    return axiosClient.get(`${URL}/favorite-list`, {\n      params: {\n        page,\n        perPage,\n        sortType\n      }\n    });\n  }\n};\nexport default wordApi;","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/apis/wordApi.js"],"names":["axiosClient","URL","wordApi","postContributeWord","wordInfor","post","getCheckWordExistence","word","type","get","params","getWordList","page","perPage","packInfo","sortType","JSON","stringify","getSearchWord","isCompact","getWordDetails","getUserFavoriteList"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AAEA,MAAMC,GAAG,GAAG,OAAZ;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,kBAAkB,EAAGC,SAAD,IAAe;AACjC,WAAOJ,WAAW,CAACK,IAAZ,CAAkB,GAAEJ,GAAI,sBAAxB,EAA+C,EAAE,GAAGG;AAAL,KAA/C,CAAP;AACD,GAHa;AAKdE,EAAAA,qBAAqB,EAAE,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACrC,WAAOR,WAAW,CAACS,GAAZ,CAAiB,GAAER,GAAI,QAAvB,EAAgC;AAAES,MAAAA,MAAM,EAAE;AAAEH,QAAAA,IAAF;AAAQC,QAAAA;AAAR;AAAV,KAAhC,CAAP;AACD,GAPa;AASd;AACAG,EAAAA,WAAW,EAAE,YAAwD;AAAA,QAAvDC,IAAuD,uEAAhD,CAAgD;AAAA,QAA7CC,OAA6C,uEAAnC,CAAmC;AAAA,QAAhCC,QAAgC;AAAA,QAAtBC,QAAsB,uEAAX,MAAW;AACnE,WAAOf,WAAW,CAACS,GAAZ,CAAiB,GAAER,GAAI,OAAvB,EAA+B;AACpCS,MAAAA,MAAM,EAAE;AAAEE,QAAAA,IAAF;AAAQC,QAAAA,OAAR;AAAiBC,QAAAA,QAAQ,EAAEE,IAAI,CAACC,SAAL,CAAeH,QAAf,CAA3B;AAAqDC,QAAAA;AAArD;AAD4B,KAA/B,CAAP;AAGD,GAda;AAgBdG,EAAAA,aAAa,EAAE,YAAkC;AAAA,QAAjCX,IAAiC,uEAA1B,EAA0B;AAAA,QAAtBY,SAAsB,uEAAV,KAAU;AAC/C,WAAOnB,WAAW,CAACS,GAAZ,CAAiB,GAAER,GAAI,cAAvB,EAAsC;AAC3CS,MAAAA,MAAM,EAAE;AAAEH,QAAAA,IAAF;AAAQY,QAAAA;AAAR;AADmC,KAAtC,CAAP;AAGD,GApBa;AAsBdC,EAAAA,cAAc,EAAE,YAAe;AAAA,QAAdb,IAAc,uEAAP,EAAO;AAC7B,WAAOP,WAAW,CAACS,GAAZ,CAAiB,GAAER,GAAI,eAAvB,EAAuC;AAAES,MAAAA,MAAM,EAAE;AAAEH,QAAAA;AAAF;AAAV,KAAvC,CAAP;AACD,GAxBa;AA0Bdc,EAAAA,mBAAmB,EAAE,YAA+C;AAAA,QAA9CT,IAA8C,uEAAvC,CAAuC;AAAA,QAApCC,OAAoC,uEAA1B,EAA0B;AAAA,QAAtBE,QAAsB,uEAAX,MAAW;AAClE,WAAOf,WAAW,CAACS,GAAZ,CAAiB,GAAER,GAAI,gBAAvB,EAAwC;AAC7CS,MAAAA,MAAM,EAAE;AAAEE,QAAAA,IAAF;AAAQC,QAAAA,OAAR;AAAiBE,QAAAA;AAAjB;AADqC,KAAxC,CAAP;AAGD;AA9Ba,CAAhB;AAiCA,eAAeb,OAAf","sourcesContent":["import axiosClient from './axiosClient';\n\nconst URL = '/word';\n\nconst wordApi = {\n  postContributeWord: (wordInfor) => {\n    return axiosClient.post(`${URL}/contribute/add-word`, { ...wordInfor });\n  },\n\n  getCheckWordExistence: (word, type) => {\n    return axiosClient.get(`${URL}/exist`, { params: { word, type } });\n  },\n\n  // get word, type, phonetic, mean\n  getWordList: (page = 1, perPage = 8, packInfo, sortType = 'rand') => {\n    return axiosClient.get(`${URL}/pack`, {\n      params: { page, perPage, packInfo: JSON.stringify(packInfo), sortType },\n    });\n  },\n\n  getSearchWord: (word = '', isCompact = false) => {\n    return axiosClient.get(`${URL}/search-word`, {\n      params: { word, isCompact },\n    });\n  },\n\n  getWordDetails: (word = '') => {\n    return axiosClient.get(`${URL}/word-details`, { params: { word } });\n  },\n\n  getUserFavoriteList: (page = 0, perPage = 20, sortType = 'rand') => {\n    return axiosClient.get(`${URL}/favorite-list`, {\n      params: { page, perPage, sortType },\n    });\n  },\n};\n\nexport default wordApi;\n"]},"metadata":{},"sourceType":"module"}