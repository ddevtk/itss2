{"ast":null,"code":"var _jsxFileName = \"/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/Login/SocialNetwork/Google.js\",\n    _s = $RefreshSig$();\n\nimport accountApi from 'apis/accountApi';\nimport ggIcon from 'assets/icons/gg-icon.png';\nimport { UX } from 'constant';\nimport React from 'react';\nimport GoogleLogin from 'react-google-login';\nimport { useDispatch } from 'react-redux';\nimport { setMessage } from 'redux/slices/message.slice';\nimport useStyle from './style';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LoginGoogle() {\n  _s();\n\n  const classes = useStyle();\n  const dispatch = useDispatch(); // handle success login\n\n  const onLoginSuccess = async () => {\n    try {\n      dispatch(setMessage({\n        type: 'success',\n        message: 'Đăng nhập thành công',\n        duration: UX.DELAY_TIME\n      }));\n      setTimeout(() => {\n        location.href = '/';\n      }, UX.DELAY_TIME);\n    } catch (error) {}\n  }; // login\n\n\n  const onLoginWithGoogle = async res => {\n    try {\n      const {\n        accessToken\n      } = res;\n      const response = await accountApi.postLoginWithGoogle(accessToken);\n      const {\n        status,\n        data\n      } = response;\n\n      if (status === 200) {\n        onLoginSuccess(data);\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Đăng nhập thất bại, thử lại !';\n      dispatch(setMessage({\n        type: 'error',\n        message\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(GoogleLogin, {\n    clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n    autoLoad: false,\n    render: renderProps => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: renderProps.onClick,\n      disabled: renderProps.disabled,\n      className: classes.socialBtn,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: classes.socialImg,\n        src: ggIcon,\n        alt: \"GG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: classes.socialName,\n        children: \"Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this),\n    onSuccess: onLoginWithGoogle,\n    onFailure: onLoginWithGoogle,\n    cookiePolicy: 'single_host_origin'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LoginGoogle, \"UJz8eCxZyheAe4tJhAxZ7Ps9B9A=\", false, function () {\n  return [useStyle, useDispatch];\n});\n\n_c = LoginGoogle;\nexport default LoginGoogle;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginGoogle\");","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/Login/SocialNetwork/Google.js"],"names":["accountApi","ggIcon","UX","React","GoogleLogin","useDispatch","setMessage","useStyle","LoginGoogle","classes","dispatch","onLoginSuccess","type","message","duration","DELAY_TIME","setTimeout","location","href","error","onLoginWithGoogle","res","accessToken","response","postLoginWithGoogle","status","data","process","env","REACT_APP_GOOGLE_CLIENT_ID","renderProps","onClick","disabled","socialBtn","socialImg","socialName"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,iBAAvB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,EAAT,QAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,4BAA3B;AACA,OAAOC,QAAP,MAAqB,SAArB;;;AAEA,SAASC,WAAT,GAAuB;AAAA;;AACrB,QAAMC,OAAO,GAAGF,QAAQ,EAAxB;AACA,QAAMG,QAAQ,GAAGL,WAAW,EAA5B,CAFqB,CAIrB;;AACA,QAAMM,cAAc,GAAG,YAAY;AACjC,QAAI;AACFD,MAAAA,QAAQ,CACNJ,UAAU,CAAC;AACTM,QAAAA,IAAI,EAAE,SADG;AAETC,QAAAA,OAAO,EAAE,sBAFA;AAGTC,QAAAA,QAAQ,EAAEZ,EAAE,CAACa;AAHJ,OAAD,CADJ,CAAR;AAQAC,MAAAA,UAAU,CAAC,MAAM;AACfC,QAAAA,QAAQ,CAACC,IAAT,GAAgB,GAAhB;AACD,OAFS,EAEPhB,EAAE,CAACa,UAFI,CAAV;AAGD,KAZD,CAYE,OAAOI,KAAP,EAAc,CAAE;AACnB,GAdD,CALqB,CAqBrB;;;AACA,QAAMC,iBAAiB,GAAG,MAAOC,GAAP,IAAe;AACvC,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAkBD,GAAxB;AAEA,YAAME,QAAQ,GAAG,MAAMvB,UAAU,CAACwB,mBAAX,CAA+BF,WAA/B,CAAvB;AACA,YAAM;AAAEG,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAmBH,QAAzB;;AAEA,UAAIE,MAAM,KAAK,GAAf,EAAoB;AAClBd,QAAAA,cAAc,CAACe,IAAD,CAAd;AACD;AACF,KATD,CASE,OAAOP,KAAP,EAAc;AAAA;;AACd,YAAMN,OAAO,GACX,oBAAAM,KAAK,CAACI,QAAN,4FAAgBG,IAAhB,8EAAsBb,OAAtB,KAAiC,+BADnC;AAEAH,MAAAA,QAAQ,CAACJ,UAAU,CAAC;AAAEM,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA;AAAjB,OAAD,CAAX,CAAR;AACD;AACF,GAfD;;AAiBA,sBACE,QAAC,WAAD;AACE,IAAA,QAAQ,EAAEc,OAAO,CAACC,GAAR,CAAYC,0BADxB;AAEE,IAAA,QAAQ,EAAE,KAFZ;AAGE,IAAA,MAAM,EAAGC,WAAD,iBACN;AACE,MAAA,OAAO,EAAEA,WAAW,CAACC,OADvB;AAEE,MAAA,QAAQ,EAAED,WAAW,CAACE,QAFxB;AAGE,MAAA,SAAS,EAAEvB,OAAO,CAACwB,SAHrB;AAAA,8BAIE;AAAK,QAAA,SAAS,EAAExB,OAAO,CAACyB,SAAxB;AAAmC,QAAA,GAAG,EAAEjC,MAAxC;AAAgD,QAAA,GAAG,EAAC;AAApD;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAM,QAAA,SAAS,EAAEQ,OAAO,CAAC0B,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ;AAYE,IAAA,SAAS,EAAEf,iBAZb;AAaE,IAAA,SAAS,EAAEA,iBAbb;AAcE,IAAA,YAAY,EAAE;AAdhB;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GAzDQZ,W;UACSD,Q,EACCF,W;;;KAFVG,W;AA2DT,eAAeA,WAAf","sourcesContent":["import accountApi from 'apis/accountApi';\nimport ggIcon from 'assets/icons/gg-icon.png';\nimport { UX } from 'constant';\nimport React from 'react';\nimport GoogleLogin from 'react-google-login';\nimport { useDispatch } from 'react-redux';\nimport { setMessage } from 'redux/slices/message.slice';\nimport useStyle from './style';\n\nfunction LoginGoogle() {\n  const classes = useStyle();\n  const dispatch = useDispatch();\n\n  // handle success login\n  const onLoginSuccess = async () => {\n    try {\n      dispatch(\n        setMessage({\n          type: 'success',\n          message: 'Đăng nhập thành công',\n          duration: UX.DELAY_TIME,\n        }),\n      );\n\n      setTimeout(() => {\n        location.href = '/';\n      }, UX.DELAY_TIME);\n    } catch (error) {}\n  };\n\n  // login\n  const onLoginWithGoogle = async (res) => {\n    try {\n      const { accessToken } = res;\n\n      const response = await accountApi.postLoginWithGoogle(accessToken);\n      const { status, data } = response;\n\n      if (status === 200) {\n        onLoginSuccess(data);\n      }\n    } catch (error) {\n      const message =\n        error.response?.data?.message || 'Đăng nhập thất bại, thử lại !';\n      dispatch(setMessage({ type: 'error', message }));\n    }\n  };\n\n  return (\n    <GoogleLogin\n      clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\n      autoLoad={false}\n      render={(renderProps) => (\n        <div\n          onClick={renderProps.onClick}\n          disabled={renderProps.disabled}\n          className={classes.socialBtn}>\n          <img className={classes.socialImg} src={ggIcon} alt=\"GG\" />\n          <span className={classes.socialName}>Google</span>\n        </div>\n      )}\n      onSuccess={onLoginWithGoogle}\n      onFailure={onLoginWithGoogle}\n      cookiePolicy={'single_host_origin'}\n    />\n  );\n}\n\nexport default LoginGoogle;\n"]},"metadata":{},"sourceType":"module"}