{"ast":null,"code":"var _jsxFileName = \"/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/CommunicationPhrase/data.js\",\n    _s = $RefreshSig$();\n\nimport sentenceApi from 'apis/sentenceApi';\nimport { equalArray } from 'helper';\nimport React, { useEffect, useRef, useState } from 'react';\nimport CommunicationPhrase from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst perPage = 20;\n\nfunction CommunicationPhraseData() {\n  _s();\n\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [more, setMore] = useState(true); // toggle infinite scrolling\n\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const [topicList, setTopicList] = useState([]);\n  const totalPage = useRef(0);\n\n  const nextPage = () => {\n    if (page < totalPage.current) {\n      setPage(page + 1);\n    } else {\n      setMore(false);\n    }\n  };\n\n  const onSelectTopic = topics => {\n    if (!topics || !Array.isArray(topics) || equalArray(topics, topicList)) {\n      return;\n    }\n\n    setPage(1);\n    setMore(true);\n    setList([]);\n    setTopicList([...topics]);\n    totalPage.current = 0;\n  }; // get total sentence\n\n\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        const apiRes = await sentenceApi.getTotalSentences(topicList);\n\n        if (apiRes.status === 200 && isSub) {\n          const {\n            total = 0\n          } = apiRes.data;\n          totalPage.current = Math.ceil(total / perPage);\n        }\n      } catch (error) {}\n    })();\n\n    return () => isSub = false;\n  }, [topicList]); // get sentence list\n\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        setLoading(true);\n        const apiRes = await sentenceApi.getSentenceList(page, perPage, topicList);\n\n        if (apiRes.status === 200 && isSub) {\n          const {\n            sentenceList = []\n          } = apiRes.data;\n          setList([...list, ...sentenceList]);\n        }\n      } catch (error) {} finally {\n        if (isSub) {\n          setLoading(false);\n          isFirstLoad && setIsFirstLoad(false);\n        }\n      }\n    })();\n\n    return () => isSub = false;\n  }, [page, topicList]);\n  return /*#__PURE__*/_jsxDEV(CommunicationPhrase, {\n    list: list,\n    isFirstLoad: isFirstLoad,\n    loading: loading,\n    more: more,\n    onLoadData: nextPage,\n    onSelectTopic: v => onSelectTopic(v)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CommunicationPhraseData, \"Ynvkvs6kK8OZtnvxkR6mpaZH1mk=\");\n\n_c = CommunicationPhraseData;\nexport default CommunicationPhraseData;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommunicationPhraseData\");","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/CommunicationPhrase/data.js"],"names":["sentenceApi","equalArray","React","useEffect","useRef","useState","CommunicationPhrase","perPage","CommunicationPhraseData","page","setPage","loading","setLoading","list","setList","more","setMore","isFirstLoad","setIsFirstLoad","topicList","setTopicList","totalPage","nextPage","current","onSelectTopic","topics","Array","isArray","isSub","apiRes","getTotalSentences","status","total","data","Math","ceil","error","getSentenceList","sentenceList","v"],"mappings":"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","sourcesContent":["import sentenceApi from 'apis/sentenceApi';\nimport { equalArray } from 'helper';\nimport React, { useEffect, useRef, useState } from 'react';\nimport CommunicationPhrase from '.';\n\nconst perPage = 20;\n\nfunction CommunicationPhraseData() {\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [more, setMore] = useState(true); // toggle infinite scrolling\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const [topicList, setTopicList] = useState([]);\n  const totalPage = useRef(0);\n\n  const nextPage = () => {\n    if (page < totalPage.current) {\n      setPage(page + 1);\n    } else {\n      setMore(false);\n    }\n  };\n\n  const onSelectTopic = (topics) => {\n    if (!topics || !Array.isArray(topics) || equalArray(topics, topicList)) {\n      return;\n    }\n\n    setPage(1);\n    setMore(true);\n    setList([]);\n    setTopicList([...topics]);\n    totalPage.current = 0;\n  };\n\n  // get total sentence\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        const apiRes = await sentenceApi.getTotalSentences(topicList);\n\n        if (apiRes.status === 200 && isSub) {\n          const { total = 0 } = apiRes.data;\n          totalPage.current = Math.ceil(total / perPage);\n        }\n      } catch (error) {}\n    })();\n\n    return () => (isSub = false);\n  }, [topicList]);\n\n  // get sentence list\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        setLoading(true);\n        const apiRes = await sentenceApi.getSentenceList(\n          page,\n          perPage,\n          topicList,\n        );\n        if (apiRes.status === 200 && isSub) {\n          const { sentenceList = [] } = apiRes.data;\n          setList([...list, ...sentenceList]);\n        }\n      } catch (error) {\n      } finally {\n        if (isSub) {\n          setLoading(false);\n          isFirstLoad && setIsFirstLoad(false);\n        }\n      }\n    })();\n\n    return () => (isSub = false);\n  }, [page, topicList]);\n\n  return (\n    <CommunicationPhrase\n      list={list}\n      isFirstLoad={isFirstLoad}\n      loading={loading}\n      more={more}\n      onLoadData={nextPage}\n      onSelectTopic={(v) => onSelectTopic(v)}\n    />\n  );\n}\n\nexport default CommunicationPhraseData;\n"]},"metadata":{},"sourceType":"module"}