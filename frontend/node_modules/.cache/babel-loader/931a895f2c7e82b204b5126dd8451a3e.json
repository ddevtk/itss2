{"ast":null,"code":"var _jsxFileName = \"/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/DynoDictionary/data.js\",\n    _s = $RefreshSig$();\n\nimport commonApi from 'apis/commonApi';\nimport wordApi from 'apis/wordApi';\nimport WordDetailModal from 'components/UI/WordDetailModal';\nimport { TOEIC_KEY } from 'constant/topics';\nimport { equalArray } from 'helper';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport DynoDictionary from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst perPage = 20;\n\nfunction DynoDictionaryData(_ref) {\n  _s();\n\n  let {\n    isTOEIC\n  } = _ref;\n  const [page, setPage] = useState(1);\n  const [sortType, setSortType] = useState('rand');\n  const [packInfo, setPackInfo] = useState(() => ({\n    type: '-1',\n    level: '-1',\n    specialty: '-1',\n    topics: isTOEIC ? [TOEIC_KEY] : []\n  }));\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [more, setMore] = useState(true); // toggle infinite scrolling\n\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const totalPage = useRef(0);\n  const preSearchList = useRef([]);\n\n  const nextPage = () => {\n    if (page < totalPage.current) {\n      setPage(page + 1);\n    } else {\n      setMore(false);\n    }\n  };\n\n  const settingWordPack = info => {\n    // check old pack vs new pack\n    let isEqual = true;\n\n    for (let k in packInfo) {\n      if (k !== 'topics' && packInfo[k] !== info[k]) {\n        isEqual = false;\n        break;\n      }\n    }\n\n    if (isEqual) isEqual = equalArray(packInfo.topics, info.topics);\n    totalPage.current = 0;\n    preSearchList.current = [];\n    setMore(true);\n    setList([]);\n    setPackInfo(info);\n    setPage(1);\n  };\n\n  const onSortTypeChange = function () {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'rand';\n    if (type === sortType) return;\n    preSearchList.current = [];\n    setSortType(type);\n    setPage(1);\n    setList([]);\n  };\n\n  const onSearchWord = async word => {\n    try {\n      if (word === '') {\n        setList(preSearchList.current);\n        setMore(true);\n        return;\n      }\n\n      const apiRes = await wordApi.getSearchWord(word);\n\n      if (apiRes.status === 200) {\n        const {\n          packList = []\n        } = apiRes.data;\n        setList(packList);\n        setMore(false);\n      }\n    } catch (error) {}\n  }; // get total word pack\n\n\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        const apiRes = await commonApi.getWordPackTotal(packInfo);\n\n        if (apiRes.status === 200 && isSub) {\n          const {\n            total = 0\n          } = apiRes.data;\n          totalPage.current = Math.ceil(total / perPage);\n        }\n      } catch (error) {}\n    })();\n\n    return () => isSub = false;\n  }, [packInfo]); // get word pack\n\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        setLoading(true);\n        const apiRes = await wordApi.getWordList(page, perPage, packInfo, sortType);\n\n        if (apiRes.status === 200 && isSub) {\n          const {\n            packList = []\n          } = apiRes.data;\n          const newList = [...list, ...packList];\n          preSearchList.current = newList;\n          setList(newList);\n        }\n      } catch (error) {} finally {\n        if (isSub) {\n          setLoading(false);\n          isFirstLoad && setIsFirstLoad(false);\n        }\n      }\n    })();\n\n    return () => isSub = false;\n  }, [page, packInfo, sortType]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DynoDictionary, {\n      isTOEIC: isTOEIC,\n      list: list,\n      loading: loading,\n      onLoadData: nextPage,\n      more: more,\n      isFirstLoad: isFirstLoad,\n      onSettingWordPack: settingWordPack,\n      onSortTypeChange: onSortTypeChange,\n      onSearchWord: onSearchWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WordDetailModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(DynoDictionaryData, \"ZMYZhlhwbZRE2hbK9PfvCxdEWdY=\");\n\n_c = DynoDictionaryData;\nDynoDictionaryData.propTypes = {\n  isTOEIC: PropTypes.bool\n};\nDynoDictionaryData.defaultProps = {\n  isTOEIC: false\n};\nexport default DynoDictionaryData;\n\nvar _c;\n\n$RefreshReg$(_c, \"DynoDictionaryData\");","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/DynoDictionary/data.js"],"names":["commonApi","wordApi","WordDetailModal","TOEIC_KEY","equalArray","PropTypes","React","useEffect","useRef","useState","DynoDictionary","perPage","DynoDictionaryData","isTOEIC","page","setPage","sortType","setSortType","packInfo","setPackInfo","type","level","specialty","topics","loading","setLoading","list","setList","more","setMore","isFirstLoad","setIsFirstLoad","totalPage","preSearchList","nextPage","current","settingWordPack","info","isEqual","k","onSortTypeChange","onSearchWord","word","apiRes","getSearchWord","status","packList","data","error","isSub","getWordPackTotal","total","Math","ceil","getWordList","newList","propTypes","bool","defaultProps"],"mappings":"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","sourcesContent":["import commonApi from 'apis/commonApi';\nimport wordApi from 'apis/wordApi';\nimport WordDetailModal from 'components/UI/WordDetailModal';\nimport { TOEIC_KEY } from 'constant/topics';\nimport { equalArray } from 'helper';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport DynoDictionary from '.';\n\nconst perPage = 20;\n\nfunction DynoDictionaryData({ isTOEIC }) {\n  const [page, setPage] = useState(1);\n  const [sortType, setSortType] = useState('rand');\n  const [packInfo, setPackInfo] = useState(() => ({\n    type: '-1',\n    level: '-1',\n    specialty: '-1',\n    topics: isTOEIC ? [TOEIC_KEY] : [],\n  }));\n  const [loading, setLoading] = useState(true);\n  const [list, setList] = useState([]);\n  const [more, setMore] = useState(true); // toggle infinite scrolling\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const totalPage = useRef(0);\n  const preSearchList = useRef([]);\n\n  const nextPage = () => {\n    if (page < totalPage.current) {\n      setPage(page + 1);\n    } else {\n      setMore(false);\n    }\n  };\n\n  const settingWordPack = (info) => {\n    // check old pack vs new pack\n    let isEqual = true;\n    for (let k in packInfo) {\n      if (k !== 'topics' && packInfo[k] !== info[k]) {\n        isEqual = false;\n        break;\n      }\n    }\n    if (isEqual) isEqual = equalArray(packInfo.topics, info.topics);\n\n    totalPage.current = 0;\n    preSearchList.current = [];\n    setMore(true);\n    setList([]);\n    setPackInfo(info);\n    setPage(1);\n  };\n\n  const onSortTypeChange = (type = 'rand') => {\n    if (type === sortType) return;\n    preSearchList.current = [];\n    setSortType(type);\n    setPage(1);\n    setList([]);\n  };\n\n  const onSearchWord = async (word) => {\n    try {\n      if (word === '') {\n        setList(preSearchList.current);\n        setMore(true);\n        return;\n      }\n\n      const apiRes = await wordApi.getSearchWord(word);\n      if (apiRes.status === 200) {\n        const { packList = [] } = apiRes.data;\n        setList(packList);\n        setMore(false);\n      }\n    } catch (error) {}\n  };\n\n  // get total word pack\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        const apiRes = await commonApi.getWordPackTotal(packInfo);\n        if (apiRes.status === 200 && isSub) {\n          const { total = 0 } = apiRes.data;\n          totalPage.current = Math.ceil(total / perPage);\n        }\n      } catch (error) {}\n    })();\n\n    return () => (isSub = false);\n  }, [packInfo]);\n\n  // get word pack\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        setLoading(true);\n        const apiRes = await wordApi.getWordList(\n          page,\n          perPage,\n          packInfo,\n          sortType,\n        );\n        if (apiRes.status === 200 && isSub) {\n          const { packList = [] } = apiRes.data;\n          const newList = [...list, ...packList];\n          preSearchList.current = newList;\n          setList(newList);\n        }\n      } catch (error) {\n      } finally {\n        if (isSub) {\n          setLoading(false);\n          isFirstLoad && setIsFirstLoad(false);\n        }\n      }\n    })();\n\n    return () => (isSub = false);\n  }, [page, packInfo, sortType]);\n\n  return (\n    <>\n      <DynoDictionary\n        isTOEIC={isTOEIC}\n        list={list}\n        loading={loading}\n        onLoadData={nextPage}\n        more={more}\n        isFirstLoad={isFirstLoad}\n        onSettingWordPack={settingWordPack}\n        onSortTypeChange={onSortTypeChange}\n        onSearchWord={onSearchWord}\n      />\n      <WordDetailModal />\n    </>\n  );\n}\n\nDynoDictionaryData.propTypes = {\n  isTOEIC: PropTypes.bool,\n};\n\nDynoDictionaryData.defaultProps = {\n  isTOEIC: false,\n};\n\nexport default DynoDictionaryData;\n"]},"metadata":{},"sourceType":"module"}