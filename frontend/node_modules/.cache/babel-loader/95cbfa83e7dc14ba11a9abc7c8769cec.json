{"ast":null,"code":"var _jsxFileName = \"/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/UI/WordFavorite.js\",\n    _s = $RefreshSig$();\n\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport UnFavoriteIcon from '@material-ui/icons/FavoriteBorder';\nimport accountApi from 'apis/accountApi';\nimport { ROUTES } from 'constant';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { setMessage } from 'redux/slices/message.slice';\nimport { setAddFavorites } from 'redux/slices/userInfo.slice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction WordFavorite(_ref) {\n  _s();\n\n  let {\n    word\n  } = _ref;\n  const {\n    isAuth,\n    username,\n    favoriteList\n  } = useSelector(state => state.userInfo);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const isFavorite = favoriteList.findIndex(i => i.toLowerCase() === word.toLowerCase()) !== -1;\n\n  const handleClick = async () => {\n    try {\n      const apiRes = await accountApi.putToggleWordFavorite(username, word, !isFavorite);\n\n      if (apiRes.status === 200) {\n        dispatch(setAddFavorites({\n          word,\n          isAdd: !isFavorite\n        }));\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Thất bại, thử lại !';\n      dispatch(setMessage({\n        type: 'error',\n        message\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isAuth ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: isFavorite ? /*#__PURE__*/_jsxDEV(FavoriteIcon, {\n        onClick: handleClick,\n        className: \"dyno-favorite active\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(UnFavoriteIcon, {\n        onClick: handleClick,\n        className: \"dyno-favorite\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(UnFavoriteIcon, {\n      onClick: () => history.push(ROUTES.LOGIN),\n      className: \"dyno-favorite\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(WordFavorite, \"aBBYEXICya5Tp65wBwejaddCsg8=\", false, function () {\n  return [useSelector, useHistory, useDispatch];\n});\n\n_c = WordFavorite;\nWordFavorite.propTypes = {\n  word: PropTypes.string\n};\nWordFavorite.defaultProps = {\n  word: ''\n};\nexport default WordFavorite;\n\nvar _c;\n\n$RefreshReg$(_c, \"WordFavorite\");","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/UI/WordFavorite.js"],"names":["FavoriteIcon","UnFavoriteIcon","accountApi","ROUTES","PropTypes","React","useDispatch","useSelector","useHistory","setMessage","setAddFavorites","WordFavorite","word","isAuth","username","favoriteList","state","userInfo","history","dispatch","isFavorite","findIndex","i","toLowerCase","handleClick","apiRes","putToggleWordFavorite","status","isAdd","error","message","response","data","type","push","LOGIN","propTypes","string","defaultProps"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,6BAAzB;AACA,OAAOC,cAAP,MAA2B,mCAA3B;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,UAAT,QAA2B,4BAA3B;AACA,SAASC,eAAT,QAAgC,6BAAhC;;;;AAEA,SAASC,YAAT,OAAgC;AAAA;;AAAA,MAAV;AAAEC,IAAAA;AAAF,GAAU;AAC9B,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA;AAApB,MAAqCR,WAAW,CACnDS,KAAD,IAAWA,KAAK,CAACC,QADmC,CAAtD;AAGA,QAAMC,OAAO,GAAGV,UAAU,EAA1B;AACA,QAAMW,QAAQ,GAAGb,WAAW,EAA5B;AAEA,QAAMc,UAAU,GACdL,YAAY,CAACM,SAAb,CAAwBC,CAAD,IAAOA,CAAC,CAACC,WAAF,OAAoBX,IAAI,CAACW,WAAL,EAAlD,MACA,CAAC,CAFH;;AAIA,QAAMC,WAAW,GAAG,YAAY;AAC9B,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMvB,UAAU,CAACwB,qBAAX,CACnBZ,QADmB,EAEnBF,IAFmB,EAGnB,CAACQ,UAHkB,CAArB;;AAKA,UAAIK,MAAM,CAACE,MAAP,KAAkB,GAAtB,EAA2B;AACzBR,QAAAA,QAAQ,CAACT,eAAe,CAAC;AAAEE,UAAAA,IAAF;AAAQgB,UAAAA,KAAK,EAAE,CAACR;AAAhB,SAAD,CAAhB,CAAR;AACD;AACF,KATD,CASE,OAAOS,KAAP,EAAc;AAAA;;AACd,YAAMC,OAAO,GAAG,oBAAAD,KAAK,CAACE,QAAN,4FAAgBC,IAAhB,8EAAsBF,OAAtB,KAAiC,qBAAjD;AACAX,MAAAA,QAAQ,CAACV,UAAU,CAAC;AAAEwB,QAAAA,IAAI,EAAE,OAAR;AAAiBH,QAAAA;AAAjB,OAAD,CAAX,CAAR;AACD;AACF,GAdD;;AAgBA,sBACE;AAAA,cACGjB,MAAM,gBACL;AAAA,gBACGO,UAAU,gBACT,QAAC,YAAD;AACE,QAAA,OAAO,EAAEI,WADX;AAEE,QAAA,SAAS,EAAC;AAFZ;AAAA;AAAA;AAAA;AAAA,cADS,gBAMT,QAAC,cAAD;AAAgB,QAAA,OAAO,EAAEA,WAAzB;AAAsC,QAAA,SAAS,EAAC;AAAhD;AAAA;AAAA;AAAA;AAAA;AAPJ,qBADK,gBAYL,QAAC,cAAD;AACE,MAAA,OAAO,EAAE,MAAMN,OAAO,CAACgB,IAAR,CAAa/B,MAAM,CAACgC,KAApB,CADjB;AAEE,MAAA,SAAS,EAAC;AAFZ;AAAA;AAAA;AAAA;AAAA;AAbJ,mBADF;AAqBD;;GAhDQxB,Y;UACoCJ,W,EAG3BC,U,EACCF,W;;;KALVK,Y;AAkDTA,YAAY,CAACyB,SAAb,GAAyB;AACvBxB,EAAAA,IAAI,EAAER,SAAS,CAACiC;AADO,CAAzB;AAIA1B,YAAY,CAAC2B,YAAb,GAA4B;AAC1B1B,EAAAA,IAAI,EAAE;AADoB,CAA5B;AAIA,eAAeD,YAAf","sourcesContent":["import FavoriteIcon from '@material-ui/icons/Favorite';\nimport UnFavoriteIcon from '@material-ui/icons/FavoriteBorder';\nimport accountApi from 'apis/accountApi';\nimport { ROUTES } from 'constant';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { setMessage } from 'redux/slices/message.slice';\nimport { setAddFavorites } from 'redux/slices/userInfo.slice';\n\nfunction WordFavorite({ word }) {\n  const { isAuth, username, favoriteList } = useSelector(\n    (state) => state.userInfo,\n  );\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const isFavorite =\n    favoriteList.findIndex((i) => i.toLowerCase() === word.toLowerCase()) !==\n    -1;\n\n  const handleClick = async () => {\n    try {\n      const apiRes = await accountApi.putToggleWordFavorite(\n        username,\n        word,\n        !isFavorite,\n      );\n      if (apiRes.status === 200) {\n        dispatch(setAddFavorites({ word, isAdd: !isFavorite }));\n      }\n    } catch (error) {\n      const message = error.response?.data?.message || 'Thất bại, thử lại !';\n      dispatch(setMessage({ type: 'error', message }));\n    }\n  };\n\n  return (\n    <>\n      {isAuth ? (\n        <>\n          {isFavorite ? (\n            <FavoriteIcon\n              onClick={handleClick}\n              className=\"dyno-favorite active\"\n            />\n          ) : (\n            <UnFavoriteIcon onClick={handleClick} className=\"dyno-favorite\" />\n          )}\n        </>\n      ) : (\n        <UnFavoriteIcon\n          onClick={() => history.push(ROUTES.LOGIN)}\n          className=\"dyno-favorite\"\n        />\n      )}\n    </>\n  );\n}\n\nWordFavorite.propTypes = {\n  word: PropTypes.string,\n};\n\nWordFavorite.defaultProps = {\n  word: '',\n};\n\nexport default WordFavorite;\n"]},"metadata":{},"sourceType":"module"}