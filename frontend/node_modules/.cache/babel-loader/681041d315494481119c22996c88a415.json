{"ast":null,"code":"var _jsxFileName = \"/Users/doviethoang/Desktop/github/dynonary-english/frontend/src/components/Flashcard/data.js\",\n    _s = $RefreshSig$();\n\nimport commonApi from 'apis/commonApi';\nimport flashcardApi from 'apis/flashcardApi';\nimport { equalArray } from 'helper';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setMessage } from 'redux/slices/message.slice';\nimport Flashcard from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst perPage = 7;\n\nfunction FlashcardData() {\n  _s();\n\n  const dispatch = useDispatch();\n  const list = useRef([]); // list store all item to prevent call API when prev button click\n\n  const [currentList, setCurrentList] = useState([]);\n  const [total, setTotal] = useState(-1);\n  const [pageInfo, setPageInfo] = useState({\n    page: 1,\n    packInfo: {\n      type: '-1',\n      level: '-1',\n      specialty: '-1',\n      topics: []\n    }\n  }); // get total word pack\n\n  useEffect(() => {\n    let isSubscribe = true;\n\n    if (total !== -1) {\n      return;\n    }\n\n    (async function getTotalWordPack() {\n      try {\n        const apiRes = await commonApi.getWordPackTotal(pageInfo.packInfo);\n\n        if (apiRes.status === 200 && isSubscribe) {\n          const {\n            total = 0\n          } = apiRes.data;\n\n          if (total === 0) {\n            dispatch(setMessage({\n              type: 'warning',\n              message: 'Gói từ vựng hiện tại không đủ, vui lòng thử lại sau.',\n              duration: 3000\n            }));\n          }\n\n          setTotal(total);\n        }\n      } catch (error) {\n        setTotal(0);\n      }\n    })();\n\n    return () => isSubscribe = false;\n  }, [total]); // get word pack when page change\n\n  useEffect(() => {\n    let isSubscribe = true;\n    if (pageInfo.page < list.current.length / perPage) return; // prevent call API when element already exists in the old array\n\n    async function getFlashcardList() {\n      try {\n        const apiRes = await flashcardApi.getWordPack(pageInfo.page, perPage, pageInfo.packInfo);\n\n        if (apiRes.status === 200 && isSubscribe) {\n          const {\n            packList = []\n          } = apiRes.data;\n          setCurrentList(packList);\n          list.current = [...list.current, ...packList];\n        }\n      } catch (error) {}\n    }\n\n    isSubscribe && getFlashcardList();\n    return () => isSubscribe = false;\n  }, [pageInfo]);\n\n  const handleNextClick = () => {\n    const {\n      page\n    } = pageInfo;\n\n    if (page < total) {\n      if (pageInfo.page < list.current.length / perPage) {\n        const oldList = list.current.slice(page * perPage, (page + 1) * perPage);\n        setCurrentList(oldList);\n      }\n\n      setPageInfo({ ...pageInfo,\n        page: page + 1\n      });\n    }\n  };\n\n  const handlePrevClick = () => {\n    const {\n      page\n    } = pageInfo;\n\n    if (page > 1) {\n      const oldList = list.current.slice((page - 2) * perPage, (page - 1) * perPage);\n      setCurrentList(oldList);\n      setPageInfo({ ...pageInfo,\n        page: page - 1\n      });\n    }\n  };\n\n  const onWordPackChange = newPackInfo => {\n    const {\n      packInfo\n    } = pageInfo; // check the similarity\n\n    let isSame = true;\n    const {\n      topics\n    } = newPackInfo;\n    isSame = equalArray(topics, packInfo.topics);\n\n    for (let k in packInfo) {\n      if (k !== 'topics' && packInfo[k] !== newPackInfo[k]) {\n        isSame = false;\n        break;\n      }\n    }\n\n    if (isSame) return; // reset and call API\n\n    list.current = [];\n    setPageInfo({\n      page: 1,\n      packInfo: newPackInfo\n    });\n    setTotal(-1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Flashcard, {\n    list: currentList,\n    total: total,\n    currentPage: pageInfo.page,\n    onNextPage: handleNextClick,\n    onPrevPage: handlePrevClick,\n    onWordPackChange: onWordPackChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FlashcardData, \"YhbWtuGXJ4u1c8JWRP8w46/JNsM=\", false, function () {\n  return [useDispatch];\n});\n\n_c = FlashcardData;\nexport default FlashcardData;\n\nvar _c;\n\n$RefreshReg$(_c, \"FlashcardData\");","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-english/frontend/src/components/Flashcard/data.js"],"names":["commonApi","flashcardApi","equalArray","React","useEffect","useRef","useState","useDispatch","setMessage","Flashcard","perPage","FlashcardData","dispatch","list","currentList","setCurrentList","total","setTotal","pageInfo","setPageInfo","page","packInfo","type","level","specialty","topics","isSubscribe","getTotalWordPack","apiRes","getWordPackTotal","status","data","message","duration","error","current","length","getFlashcardList","getWordPack","packList","handleNextClick","oldList","slice","handlePrevClick","onWordPackChange","newPackInfo","isSame","k"],"mappings":"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","sourcesContent":["import commonApi from 'apis/commonApi';\nimport flashcardApi from 'apis/flashcardApi';\nimport { equalArray } from 'helper';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setMessage } from 'redux/slices/message.slice';\nimport Flashcard from '.';\n\nconst perPage = 7;\n\nfunction FlashcardData() {\n  const dispatch = useDispatch();\n  const list = useRef([]); // list store all item to prevent call API when prev button click\n  const [currentList, setCurrentList] = useState([]);\n  const [total, setTotal] = useState(-1);\n  const [pageInfo, setPageInfo] = useState({\n    page: 1,\n    packInfo: {\n      type: '-1',\n      level: '-1',\n      specialty: '-1',\n      topics: [],\n    },\n  });\n\n  // get total word pack\n  useEffect(() => {\n    let isSubscribe = true;\n\n    if (total !== -1) {\n      return;\n    }\n\n    (async function getTotalWordPack() {\n      try {\n        const apiRes = await commonApi.getWordPackTotal(pageInfo.packInfo);\n\n        if (apiRes.status === 200 && isSubscribe) {\n          const { total = 0 } = apiRes.data;\n          if (total === 0) {\n            dispatch(\n              setMessage({\n                type: 'warning',\n                message: 'Gói từ vựng hiện tại không đủ, vui lòng thử lại sau.',\n                duration: 3000,\n              }),\n            );\n          }\n          setTotal(total);\n        }\n      } catch (error) {\n        setTotal(0);\n      }\n    })();\n\n    return () => (isSubscribe = false);\n  }, [total]);\n\n  // get word pack when page change\n  useEffect(() => {\n    let isSubscribe = true;\n    if (pageInfo.page < list.current.length / perPage) return; // prevent call API when element already exists in the old array\n\n    async function getFlashcardList() {\n      try {\n        const apiRes = await flashcardApi.getWordPack(\n          pageInfo.page,\n          perPage,\n          pageInfo.packInfo,\n        );\n\n        if (apiRes.status === 200 && isSubscribe) {\n          const { packList = [] } = apiRes.data;\n          setCurrentList(packList);\n          list.current = [...list.current, ...packList];\n        }\n      } catch (error) {}\n    }\n\n    isSubscribe && getFlashcardList();\n\n    return () => (isSubscribe = false);\n  }, [pageInfo]);\n\n  const handleNextClick = () => {\n    const { page } = pageInfo;\n    if (page < total) {\n      if (pageInfo.page < list.current.length / perPage) {\n        const oldList = list.current.slice(\n          page * perPage,\n          (page + 1) * perPage,\n        );\n        setCurrentList(oldList);\n      }\n      setPageInfo({ ...pageInfo, page: page + 1 });\n    }\n  };\n\n  const handlePrevClick = () => {\n    const { page } = pageInfo;\n    if (page > 1) {\n      const oldList = list.current.slice(\n        (page - 2) * perPage,\n        (page - 1) * perPage,\n      );\n      setCurrentList(oldList);\n      setPageInfo({ ...pageInfo, page: page - 1 });\n    }\n  };\n\n  const onWordPackChange = (newPackInfo) => {\n    const { packInfo } = pageInfo;\n\n    // check the similarity\n    let isSame = true;\n    const { topics } = newPackInfo;\n    isSame = equalArray(topics, packInfo.topics);\n    for (let k in packInfo) {\n      if (k !== 'topics' && packInfo[k] !== newPackInfo[k]) {\n        isSame = false;\n        break;\n      }\n    }\n\n    if (isSame) return;\n\n    // reset and call API\n    list.current = [];\n    setPageInfo({\n      page: 1,\n      packInfo: newPackInfo,\n    });\n    setTotal(-1);\n  };\n\n  return (\n    <Flashcard\n      list={currentList}\n      total={total}\n      currentPage={pageInfo.page}\n      onNextPage={handleNextClick}\n      onPrevPage={handlePrevClick}\n      onWordPackChange={onWordPackChange}\n    />\n  );\n}\n\nexport default FlashcardData;\n"]},"metadata":{},"sourceType":"module"}