{"ast":null,"code":"import { COLOR_VAR_KEYS, DEFAULTS, THEME_KEYS, VOICE_KEYS } from 'constant';\nconst htmlRoot = document.querySelector(':root'); // prevent execute continuously a function\n\nexport const debounce = function () {\n  let timer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let cbFn = arguments.length > 1 ? arguments[1] : undefined;\n  let delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 350;\n\n  if (timer) {\n    clearTimeout(timer);\n  }\n\n  return setTimeout(cbFn, delay);\n}; // compare 2 arrays\n\nexport const equalArray = (a, b) => {\n  return Array.isArray(a) && Array.isArray(b) && a.length === b.length && a.every((val, index) => val === b[index]);\n}; // get current root palettes\n\nfunction getRootPalettes() {\n  let palettes = [];\n  const rootStyles = getComputedStyle(htmlRoot);\n  COLOR_VAR_KEYS.forEach(item => {\n    let color = rootStyles.getPropertyValue(item.key);\n    palettes.push({ ...item,\n      color: color[0] === '#' ? color : color.slice(1) // output ' #123456' => slice(1) = '#123456'\n\n    });\n  });\n  return palettes;\n} // get custom palettes from local storage\n\n\nexport const getCustomPalettes = () => {\n  const palettes = localStorage.getItem(THEME_KEYS.PALETTE_KEY);\n\n  if (!palettes) {\n    const newPalettes = getRootPalettes();\n    localStorage.setItem(THEME_KEYS.PALETTE_KEY, JSON.stringify(newPalettes));\n    return newPalettes;\n  } else {\n    return JSON.parse(palettes);\n  }\n}; // set palettes for root\n\nexport const setRootPalettes = () => {\n  const palettes = getCustomPalettes();\n  palettes === null || palettes === void 0 ? void 0 : palettes.forEach(item => htmlRoot.style.setProperty(item.key, item.color));\n}; // get window voice list\n\nexport const getSpeechSynthesis = () => {\n  return new Promise(resolve => {\n    let synth = window.speechSynthesis;\n    let intervalId;\n    intervalId = setInterval(() => {\n      if (synth.getVoices().length !== 0) {\n        clearInterval(intervalId);\n        resolve(synth.getVoices());\n      }\n    }, 20);\n  });\n}; // update or add custom voice in local storage\n\nexport const updateLSVoice = (key, value) => {\n  let current = localStorage.getItem(VOICE_KEYS.LS_KEY);\n  let newLSVoice = {};\n\n  if (current) {\n    newLSVoice = JSON.parse(current);\n    newLSVoice[key] = value;\n  } else {\n    newLSVoice = {\n      voiceURI: DEFAULTS.VOICE_URI,\n      speed: DEFAULTS.VOICE_SPEED,\n      volume: DEFAULTS.VOICE_VOLUME\n    };\n    newLSVoice[key] = value;\n  }\n\n  localStorage.setItem(VOICE_KEYS.LS_KEY, JSON.stringify(newLSVoice));\n}; // optimize images\n\nexport const cloudinaryImgOptimize = function () {\n  let originSrc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let fAuto = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  let qAuto = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  let others = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';\n  if (!originSrc) return '';\n  const cloudinaryBaseURL = 'https://res.cloudinary.com/dynonary/image/upload';\n  const index = originSrc.indexOf(cloudinaryBaseURL); // Not cloudinary source\n\n  if (index === -1) {\n    return originSrc;\n  }\n\n  let optimize = `${width > 0 ? `w_${width},` : ''}${height > 0 ? `h_${height},` : ''}${fAuto ? 'f_auto,' : ''}${qAuto ? 'q_auto,' : ''}${others && others !== '' ? others : ''}`;\n  if (optimize[optimize.length - 1] === ',') optimize = optimize.slice(0, optimize.length - 1);\n  return originSrc.replace(cloudinaryBaseURL, `${cloudinaryBaseURL}/${optimize}`);\n};\nexport const addOrDelItemInArray = function () {\n  let arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let item = arguments.length > 1 ? arguments[1] : undefined;\n  if (!arr || !Array.isArray(arr)) return arr;\n  const index = arr.findIndex(i => i === item);\n\n  if (index === -1) {\n    arr.push(item);\n    return arr;\n  }\n\n  arr.splice(index, 1);\n  return arr;\n};\nexport const formatDate = function () {\n  let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n\n  try {\n    const d = new Date(date);\n    const day = `0${d.getDate()}`.slice(-2);\n    const m = `0${d.getMonth() + 1}`.slice(-2);\n    const y = d.getFullYear();\n    return `${day}-${m}-${y}`;\n  } catch (error) {\n    return date;\n  }\n};","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/helper/index.js"],"names":["COLOR_VAR_KEYS","DEFAULTS","THEME_KEYS","VOICE_KEYS","htmlRoot","document","querySelector","debounce","timer","cbFn","delay","clearTimeout","setTimeout","equalArray","a","b","Array","isArray","length","every","val","index","getRootPalettes","palettes","rootStyles","getComputedStyle","forEach","item","color","getPropertyValue","key","push","slice","getCustomPalettes","localStorage","getItem","PALETTE_KEY","newPalettes","setItem","JSON","stringify","parse","setRootPalettes","style","setProperty","getSpeechSynthesis","Promise","resolve","synth","window","speechSynthesis","intervalId","setInterval","getVoices","clearInterval","updateLSVoice","value","current","LS_KEY","newLSVoice","voiceURI","VOICE_URI","speed","VOICE_SPEED","volume","VOICE_VOLUME","cloudinaryImgOptimize","originSrc","width","height","fAuto","qAuto","others","cloudinaryBaseURL","indexOf","optimize","replace","addOrDelItemInArray","arr","findIndex","i","splice","formatDate","date","Date","d","day","getDate","m","getMonth","y","getFullYear","error"],"mappings":"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","sourcesContent":["import { COLOR_VAR_KEYS, DEFAULTS, THEME_KEYS, VOICE_KEYS } from 'constant';\nconst htmlRoot = document.querySelector(':root');\n\n// prevent execute continuously a function\nexport const debounce = (timer = null, cbFn, delay = 350) => {\n  if (timer) {\n    clearTimeout(timer);\n  }\n  return setTimeout(cbFn, delay);\n};\n\n// compare 2 arrays\nexport const equalArray = (a, b) => {\n  return (\n    Array.isArray(a) &&\n    Array.isArray(b) &&\n    a.length === b.length &&\n    a.every((val, index) => val === b[index])\n  );\n};\n\n// get current root palettes\nfunction getRootPalettes() {\n  let palettes = [];\n  const rootStyles = getComputedStyle(htmlRoot);\n\n  COLOR_VAR_KEYS.forEach((item) => {\n    let color = rootStyles.getPropertyValue(item.key);\n\n    palettes.push({\n      ...item,\n      color: color[0] === '#' ? color : color.slice(1), // output ' #123456' => slice(1) = '#123456'\n    });\n  });\n\n  return palettes;\n}\n\n// get custom palettes from local storage\nexport const getCustomPalettes = () => {\n  const palettes = localStorage.getItem(THEME_KEYS.PALETTE_KEY);\n  if (!palettes) {\n    const newPalettes = getRootPalettes();\n    localStorage.setItem(THEME_KEYS.PALETTE_KEY, JSON.stringify(newPalettes));\n    return newPalettes;\n  } else {\n    return JSON.parse(palettes);\n  }\n};\n\n// set palettes for root\nexport const setRootPalettes = () => {\n  const palettes = getCustomPalettes();\n  palettes?.forEach((item) => htmlRoot.style.setProperty(item.key, item.color));\n};\n\n// get window voice list\nexport const getSpeechSynthesis = () => {\n  return new Promise((resolve) => {\n    let synth = window.speechSynthesis;\n    let intervalId;\n\n    intervalId = setInterval(() => {\n      if (synth.getVoices().length !== 0) {\n        clearInterval(intervalId);\n        resolve(synth.getVoices());\n      }\n    }, 20);\n  });\n};\n\n// update or add custom voice in local storage\nexport const updateLSVoice = (key, value) => {\n  let current = localStorage.getItem(VOICE_KEYS.LS_KEY);\n  let newLSVoice = {};\n\n  if (current) {\n    newLSVoice = JSON.parse(current);\n    newLSVoice[key] = value;\n  } else {\n    newLSVoice = {\n      voiceURI: DEFAULTS.VOICE_URI,\n      speed: DEFAULTS.VOICE_SPEED,\n      volume: DEFAULTS.VOICE_VOLUME,\n    };\n    newLSVoice[key] = value;\n  }\n\n  localStorage.setItem(VOICE_KEYS.LS_KEY, JSON.stringify(newLSVoice));\n};\n\n// optimize images\nexport const cloudinaryImgOptimize = (\n  originSrc = '',\n  width = 0,\n  height = 0,\n  fAuto = true,\n  qAuto = true,\n  others = '',\n) => {\n  if (!originSrc) return '';\n\n  const cloudinaryBaseURL = 'https://res.cloudinary.com/dynonary/image/upload';\n  const index = originSrc.indexOf(cloudinaryBaseURL);\n\n  // Not cloudinary source\n  if (index === -1) {\n    return originSrc;\n  }\n\n  let optimize = `${width > 0 ? `w_${width},` : ''}${\n    height > 0 ? `h_${height},` : ''\n  }${fAuto ? 'f_auto,' : ''}${qAuto ? 'q_auto,' : ''}${\n    others && others !== '' ? others : ''\n  }`;\n\n  if (optimize[optimize.length - 1] === ',')\n    optimize = optimize.slice(0, optimize.length - 1);\n\n  return originSrc.replace(\n    cloudinaryBaseURL,\n    `${cloudinaryBaseURL}/${optimize}`,\n  );\n};\n\nexport const addOrDelItemInArray = (arr = [], item) => {\n  if (!arr || !Array.isArray(arr)) return arr;\n\n  const index = arr.findIndex((i) => i === item);\n\n  if (index === -1) {\n    arr.push(item);\n    return arr;\n  }\n\n  arr.splice(index, 1);\n  return arr;\n};\n\nexport const formatDate = (date = new Date()) => {\n  try {\n    const d = new Date(date);\n    const day = `0${d.getDate()}`.slice(-2);\n    const m = `0${d.getMonth() + 1}`.slice(-2);\n    const y = d.getFullYear();\n    return `${day}-${m}-${y}`;\n  } catch (error) {\n    return date;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}