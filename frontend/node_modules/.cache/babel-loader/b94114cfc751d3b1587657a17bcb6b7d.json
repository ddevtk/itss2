{"ast":null,"code":"var _jsxFileName = \"/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/Grammar/data.js\",\n    _s = $RefreshSig$();\n\nimport blogApi from 'apis/blogApi';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setMessage } from 'redux/slices/message.slice';\nimport Grammar from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GrammarData() {\n  _s();\n\n  const dispatch = useDispatch();\n  const [list, setList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        const apiRes = await blogApi.getBlogList();\n\n        if (apiRes.status === 200 && isSub) {\n          const {\n            blogList = []\n          } = apiRes.data;\n          setLoading(false);\n          setList(blogList);\n        }\n      } catch (error) {\n        var _error$response, _error$response$data;\n\n        const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Lấy tài liệu thất bại, thử lại !';\n        dispatch(setMessage({\n          message,\n          type: 'error'\n        }));\n      }\n    })();\n\n    return () => {\n      isSub = false;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Grammar, {\n    loading: loading,\n    list: list\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 10\n  }, this);\n}\n\n_s(GrammarData, \"VwxcmY1S7baO5aZd6lWkPDhJhuI=\", false, function () {\n  return [useDispatch];\n});\n\n_c = GrammarData;\nexport default GrammarData;\n\nvar _c;\n\n$RefreshReg$(_c, \"GrammarData\");","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/Grammar/data.js"],"names":["blogApi","React","useEffect","useState","useDispatch","setMessage","Grammar","GrammarData","dispatch","list","setList","loading","setLoading","isSub","apiRes","getBlogList","status","blogList","data","error","message","response","type"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,4BAA3B;AACA,OAAOC,OAAP,MAAoB,GAApB;;;AAEA,SAASC,WAAT,GAAuB;AAAA;;AACrB,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,KAAK,GAAG,IAAZ;;AAEA,KAAC,kBAAkB;AACjB,UAAI;AACF,cAAMC,MAAM,GAAG,MAAMd,OAAO,CAACe,WAAR,EAArB;;AACA,YAAID,MAAM,CAACE,MAAP,KAAkB,GAAlB,IAAyBH,KAA7B,EAAoC;AAClC,gBAAM;AAAEI,YAAAA,QAAQ,GAAG;AAAb,cAAoBH,MAAM,CAACI,IAAjC;AACAN,UAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,UAAAA,OAAO,CAACO,QAAD,CAAP;AACD;AACF,OAPD,CAOE,OAAOE,KAAP,EAAc;AAAA;;AACd,cAAMC,OAAO,GACX,oBAAAD,KAAK,CAACE,QAAN,4FAAgBH,IAAhB,8EAAsBE,OAAtB,KAAiC,kCADnC;AAEAZ,QAAAA,QAAQ,CAACH,UAAU,CAAC;AAAEe,UAAAA,OAAF;AAAWE,UAAAA,IAAI,EAAE;AAAjB,SAAD,CAAX,CAAR;AACD;AACF,KAbD;;AAeA,WAAO,MAAM;AACXT,MAAAA,KAAK,GAAG,KAAR;AACD,KAFD;AAGD,GArBQ,EAqBN,EArBM,CAAT;AAuBA,sBAAO,QAAC,OAAD;AAAS,IAAA,OAAO,EAAEF,OAAlB;AAA2B,IAAA,IAAI,EAAEF;AAAjC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GA7BQF,W;UACUH,W;;;KADVG,W;AA+BT,eAAeA,WAAf","sourcesContent":["import blogApi from 'apis/blogApi';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setMessage } from 'redux/slices/message.slice';\nimport Grammar from '.';\n\nfunction GrammarData() {\n  const dispatch = useDispatch();\n  const [list, setList] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    let isSub = true;\n\n    (async function () {\n      try {\n        const apiRes = await blogApi.getBlogList();\n        if (apiRes.status === 200 && isSub) {\n          const { blogList = [] } = apiRes.data;\n          setLoading(false);\n          setList(blogList);\n        }\n      } catch (error) {\n        const message =\n          error.response?.data?.message || 'Lấy tài liệu thất bại, thử lại !';\n        dispatch(setMessage({ message, type: 'error' }));\n      }\n    })();\n\n    return () => {\n      isSub = false;\n    };\n  }, []);\n\n  return <Grammar loading={loading} list={list} />;\n}\n\nexport default GrammarData;\n"]},"metadata":{},"sourceType":"module"}