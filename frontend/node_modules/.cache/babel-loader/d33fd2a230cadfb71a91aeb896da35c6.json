{"ast":null,"code":"var _jsxFileName = \"/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/Register/data.js\",\n    _s = $RefreshSig$();\n\nimport accountApi from 'apis/accountApi';\nimport { ROUTES, UX } from 'constant';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { setMessage } from 'redux/slices/message.slice';\nimport Register from './index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RegisterData() {\n  _s();\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [loading, setLoading] = useState(false);\n\n  const handleRegister = async account => {\n    try {\n      setLoading(true);\n      const {\n        email,\n        password,\n        name\n      } = account;\n      const apiRes = await accountApi.postRegisterAccount(email.toLowerCase(), name, password);\n\n      if ((apiRes === null || apiRes === void 0 ? void 0 : apiRes.status) === 200) {\n        const message = 'Đăng ký thành công';\n        dispatch(setMessage({\n          message,\n          type: 'success'\n        }));\n        setTimeout(() => {\n          setLoading(false);\n          history.push(ROUTES.LOGIN);\n        }, UX.DELAY_TIME);\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || ' thất bại, thử lại !';\n      dispatch(setMessage({\n        message,\n        type: 'error'\n      }));\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Register, {\n    onRegister: handleRegister,\n    loading: loading\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 10\n  }, this);\n}\n\n_s(RegisterData, \"1DXXsYNX7/v/o2qmSrGSXfn10m0=\", false, function () {\n  return [useDispatch, useHistory];\n});\n\n_c = RegisterData;\nexport default RegisterData;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterData\");","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/Register/data.js"],"names":["accountApi","ROUTES","UX","React","useState","useDispatch","useHistory","setMessage","Register","RegisterData","dispatch","history","loading","setLoading","handleRegister","account","email","password","name","apiRes","postRegisterAccount","toLowerCase","status","message","type","setTimeout","push","LOGIN","DELAY_TIME","error","response","data"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,iBAAvB;AACA,SAASC,MAAT,EAAiBC,EAAjB,QAA2B,UAA3B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,UAAT,QAA2B,4BAA3B;AACA,OAAOC,QAAP,MAAqB,SAArB;;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AACtB,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAMM,OAAO,GAAGL,UAAU,EAA1B;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMU,cAAc,GAAG,MAAOC,OAAP,IAAmB;AACxC,QAAI;AACFF,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAM;AAAEG,QAAAA,KAAF;AAASC,QAAAA,QAAT;AAAmBC,QAAAA;AAAnB,UAA4BH,OAAlC;AACA,YAAMI,MAAM,GAAG,MAAMnB,UAAU,CAACoB,mBAAX,CACnBJ,KAAK,CAACK,WAAN,EADmB,EAEnBH,IAFmB,EAGnBD,QAHmB,CAArB;;AAMA,UAAI,CAAAE,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEG,MAAR,MAAmB,GAAvB,EAA4B;AAC1B,cAAMC,OAAO,GAAG,oBAAhB;AACAb,QAAAA,QAAQ,CAACH,UAAU,CAAC;AAAEgB,UAAAA,OAAF;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SAAD,CAAX,CAAR;AACAC,QAAAA,UAAU,CAAC,MAAM;AACfZ,UAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,UAAAA,OAAO,CAACe,IAAR,CAAazB,MAAM,CAAC0B,KAApB;AACD,SAHS,EAGPzB,EAAE,CAAC0B,UAHI,CAAV;AAID;AACF,KAjBD,CAiBE,OAAOC,KAAP,EAAc;AAAA;;AACd,YAAMN,OAAO,GAAG,oBAAAM,KAAK,CAACC,QAAN,4FAAgBC,IAAhB,8EAAsBR,OAAtB,KAAiC,sBAAjD;AACAb,MAAAA,QAAQ,CAACH,UAAU,CAAC;AAAEgB,QAAAA,OAAF;AAAWC,QAAAA,IAAI,EAAE;AAAjB,OAAD,CAAX,CAAR;AACAX,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GAvBD;;AAyBA,sBAAO,QAAC,QAAD;AAAU,IAAA,UAAU,EAAEC,cAAtB;AAAsC,IAAA,OAAO,EAAEF;AAA/C;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GA/BQH,Y;UACUJ,W,EACDC,U;;;KAFTG,Y;AAiCT,eAAeA,YAAf","sourcesContent":["import accountApi from 'apis/accountApi';\nimport { ROUTES, UX } from 'constant';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { setMessage } from 'redux/slices/message.slice';\nimport Register from './index';\n\nfunction RegisterData() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [loading, setLoading] = useState(false);\n\n  const handleRegister = async (account) => {\n    try {\n      setLoading(true);\n      const { email, password, name } = account;\n      const apiRes = await accountApi.postRegisterAccount(\n        email.toLowerCase(),\n        name,\n        password,\n      );\n\n      if (apiRes?.status === 200) {\n        const message = 'Đăng ký thành công';\n        dispatch(setMessage({ message, type: 'success' }));\n        setTimeout(() => {\n          setLoading(false);\n          history.push(ROUTES.LOGIN);\n        }, UX.DELAY_TIME);\n      }\n    } catch (error) {\n      const message = error.response?.data?.message || ' thất bại, thử lại !';\n      dispatch(setMessage({ message, type: 'error' }));\n      setLoading(false);\n    }\n  };\n\n  return <Register onRegister={handleRegister} loading={loading} />;\n}\n\nexport default RegisterData;\n"]},"metadata":{},"sourceType":"module"}