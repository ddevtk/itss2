{"ast":null,"code":"import axios from 'axios';\nimport queryString from 'query-string';\nconst axiosClient = axios.create({\n  baseURL: process.env.NODE_ENV === 'development' ? process.env.REACT_APP_API_LOCAL_BASE_URL : process.env.REACT_APP_API_BASE_URL,\n  headers: {\n    'content-type': 'application/json'\n  },\n  withCredentials: true,\n  paramsSerializer: params => queryString.stringify(params)\n});\naxiosClient.interceptors.request.use(config => {\n  return config;\n}, error => {\n  throw error;\n});\naxios.interceptors.response.use(res => {\n  return res;\n}, error => {\n  throw error;\n});\nexport default axiosClient;","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-english/frontend/src/apis/axiosClient.js"],"names":["axios","queryString","axiosClient","create","baseURL","process","env","NODE_ENV","REACT_APP_API_LOCAL_BASE_URL","REACT_APP_API_BASE_URL","headers","withCredentials","paramsSerializer","params","stringify","interceptors","request","use","config","error","response","res"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,MAAMC,WAAW,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC/BC,EAAAA,OAAO,EACLC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,GACIF,OAAO,CAACC,GAAR,CAAYE,4BADhB,GAEIH,OAAO,CAACC,GAAR,CAAYG,sBAJa;AAK/BC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT,GALsB;AAQ/BC,EAAAA,eAAe,EAAE,IARc;AAS/BC,EAAAA,gBAAgB,EAAGC,MAAD,IAAYZ,WAAW,CAACa,SAAZ,CAAsBD,MAAtB;AATC,CAAb,CAApB;AAYAX,WAAW,CAACa,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CACGC,MAAD,IAAY;AACV,SAAOA,MAAP;AACD,CAHH,EAIGC,KAAD,IAAW;AACT,QAAMA,KAAN;AACD,CANH;AASAnB,KAAK,CAACe,YAAN,CAAmBK,QAAnB,CAA4BH,GAA5B,CACGI,GAAD,IAAS;AACP,SAAOA,GAAP;AACD,CAHH,EAIGF,KAAD,IAAW;AACT,QAAMA,KAAN;AACD,CANH;AASA,eAAejB,WAAf","sourcesContent":["import axios from 'axios';\nimport queryString from 'query-string';\n\nconst axiosClient = axios.create({\n  baseURL:\n    process.env.NODE_ENV === 'development'\n      ? process.env.REACT_APP_API_LOCAL_BASE_URL\n      : process.env.REACT_APP_API_BASE_URL,\n  headers: {\n    'content-type': 'application/json',\n  },\n  withCredentials: true,\n  paramsSerializer: (params) => queryString.stringify(params),\n});\n\naxiosClient.interceptors.request.use(\n  (config) => {\n    return config;\n  },\n  (error) => {\n    throw error;\n  },\n);\n\naxios.interceptors.response.use(\n  (res) => {\n    return res;\n  },\n  (error) => {\n    throw error;\n  },\n);\n\nexport default axiosClient;\n"]},"metadata":{},"sourceType":"module"}