{"ast":null,"code":"var _jsxFileName = \"/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/Contribution/Word/data.js\",\n    _s = $RefreshSig$();\n\nimport wordApi from 'apis/wordApi';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setMessage } from 'redux/slices/message.slice';\nimport WordContribution from './index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst analysisExample = function () {\n  let exampleStr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let word = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  if (typeof exampleStr !== 'string' || exampleStr === '') {\n    return [];\n  }\n\n  const exampleArr = exampleStr.split('\\n');\n\n  for (let str of exampleArr) {\n    if (str.toLocaleLowerCase().indexOf(word.toLocaleLowerCase()) === -1) {\n      return false;\n    }\n  }\n\n  return exampleArr;\n};\n\nfunction WordContributionData() {\n  _s();\n\n  const [submitting, setSubmitting] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleSubmit = async data => {\n    try {\n      setSubmitting(true);\n      const {\n        examples,\n        synonyms,\n        antonyms,\n        word,\n        phonetic,\n        ...rest\n      } = data; // check examples validation\n\n      const exampleArr = analysisExample(examples, word);\n\n      if (typeof exampleArr === 'boolean' && !exampleArr) {\n        dispatch(setMessage({\n          type: 'warning',\n          message: 'Câu ví dụ phải chứa từ vựng mới.'\n        }));\n        setSubmitting(false);\n        return;\n      } // split synonyms string to an array synonyms\n\n\n      const synonymArr = synonyms !== '' ? synonyms.split('\\n') : []; // split antonyms string to an array synonyms\n\n      const antonymArr = antonyms !== '' ? antonyms.split('\\n') : []; // call API\n\n      const dataSend = { ...rest,\n        examples: exampleArr,\n        synonyms: synonymArr,\n        antonyms: antonymArr,\n        word,\n        phonetic: phonetic.replaceAll('/', '')\n      };\n      const apiRes = await wordApi.postContributeWord(dataSend);\n\n      if (apiRes.status === 200) {\n        dispatch(setMessage({\n          type: 'success',\n          message: 'Thêm thành công, đang chờ xét duyệt. Cảm ơn sự đóng góp của bạn ❤',\n          duration: 5000\n        }));\n        setSubmitting(false);\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Thêm từ mới không thành công, thử lại';\n      dispatch(setMessage({\n        type: 'error',\n        message\n      }));\n      setSubmitting(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(WordContribution, {\n    onSubmitForm: handleSubmit,\n    submitting: submitting\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WordContributionData, \"5iB+qujXnQj6jBoSGKljUlKKZP8=\", false, function () {\n  return [useDispatch];\n});\n\n_c = WordContributionData;\nexport default WordContributionData;\n\nvar _c;\n\n$RefreshReg$(_c, \"WordContributionData\");","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/Contribution/Word/data.js"],"names":["wordApi","React","useState","useDispatch","setMessage","WordContribution","analysisExample","exampleStr","word","exampleArr","split","str","toLocaleLowerCase","indexOf","WordContributionData","submitting","setSubmitting","dispatch","handleSubmit","data","examples","synonyms","antonyms","phonetic","rest","type","message","synonymArr","antonymArr","dataSend","replaceAll","apiRes","postContributeWord","status","duration","error","response"],"mappings":"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","sourcesContent":["import wordApi from 'apis/wordApi';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setMessage } from 'redux/slices/message.slice';\nimport WordContribution from './index';\n\nconst analysisExample = (exampleStr = '', word = '') => {\n  if (typeof exampleStr !== 'string' || exampleStr === '') {\n    return [];\n  }\n\n  const exampleArr = exampleStr.split('\\n');\n  for (let str of exampleArr) {\n    if (str.toLocaleLowerCase().indexOf(word.toLocaleLowerCase()) === -1) {\n      return false;\n    }\n  }\n\n  return exampleArr;\n};\n\nfunction WordContributionData() {\n  const [submitting, setSubmitting] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (data) => {\n    try {\n      setSubmitting(true);\n      const { examples, synonyms, antonyms, word, phonetic, ...rest } = data;\n\n      // check examples validation\n      const exampleArr = analysisExample(examples, word);\n      if (typeof exampleArr === 'boolean' && !exampleArr) {\n        dispatch(\n          setMessage({\n            type: 'warning',\n            message: 'Câu ví dụ phải chứa từ vựng mới.',\n          }),\n        );\n        setSubmitting(false);\n        return;\n      }\n\n      // split synonyms string to an array synonyms\n      const synonymArr = synonyms !== '' ? synonyms.split('\\n') : [];\n\n      // split antonyms string to an array synonyms\n      const antonymArr = antonyms !== '' ? antonyms.split('\\n') : [];\n\n      // call API\n      const dataSend = {\n        ...rest,\n        examples: exampleArr,\n        synonyms: synonymArr,\n        antonyms: antonymArr,\n        word,\n        phonetic: phonetic.replaceAll('/', ''),\n      };\n\n      const apiRes = await wordApi.postContributeWord(dataSend);\n\n      if (apiRes.status === 200) {\n        dispatch(\n          setMessage({\n            type: 'success',\n            message:\n              'Thêm thành công, đang chờ xét duyệt. Cảm ơn sự đóng góp của bạn ❤',\n            duration: 5000,\n          }),\n        );\n        setSubmitting(false);\n      }\n    } catch (error) {\n      const message =\n        error.response?.data?.message ||\n        'Thêm từ mới không thành công, thử lại';\n      dispatch(\n        setMessage({\n          type: 'error',\n          message,\n        }),\n      );\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <WordContribution onSubmitForm={handleSubmit} submitting={submitting} />\n  );\n}\n\nexport default WordContributionData;\n"]},"metadata":{},"sourceType":"module"}