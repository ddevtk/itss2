{"ast":null,"code":"var _jsxFileName = \"/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/PlayGames/WordMatch/SplitWord/index.js\",\n    _s = $RefreshSig$();\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpIcon from '@material-ui/icons/LiveHelp';\nimport wordApi from 'apis/wordApi';\nimport Speaker from 'components/UI/Speaker';\nimport WordDetailModal from 'components/UI/WordDetailModal';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport useStyle from './style';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst userSplitId = 'userSplitId';\n\nfunction splitWord() {\n  let word = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let splitArr = [];\n  let failFlag = 1;\n\n  while (failFlag) {\n    // Prevent infinite loop\n    if (failFlag >= 50) {\n      break;\n    }\n\n    splitArr = word.split('').sort(() => Math.random() - 0.5);\n\n    if (splitArr.join('') === word) {\n      failFlag++;\n    } else {\n      failFlag = 0;\n      break;\n    }\n  }\n\n  return splitArr;\n}\n\nfunction SplitWord(_ref) {\n  _s();\n\n  var _userSplit;\n\n  let {\n    word,\n    mean,\n    onCorrect,\n    onWrong,\n    resetFlag\n  } = _ref;\n  const originSplit = useRef(splitWord(word.toLowerCase()));\n  const [userSplit, setUserSplit] = useState([]);\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [isCheck, setIsCheck] = useState(false);\n  const [modal, setModal] = useState({\n    show: false,\n    loading: false,\n    data: null\n  });\n  const classes = useStyle(); // animation for select a character\n\n  const aniStyle = makeStyles({\n    slideAni: {\n      position: 'relative',\n      '&:before': {\n        position: 'absolute',\n        top: 0,\n        content: `\"${(_userSplit = userSplit[userSplit.length - 1]) === null || _userSplit === void 0 ? void 0 : _userSplit.ch}\"`,\n        width: '100%',\n        height: '100%',\n        backgroundColor: 'var(--bg-color-accent)',\n        animationName: 'aniSlide',\n        animationDuration: '0.35s',\n        animationFillMode: 'forwards'\n      }\n    }\n  })();\n\n  const handleSelectCharacter = index => {\n    const newUserSplit = [...userSplit, {\n      index,\n      ch: originSplit.current[index]\n    }];\n    setUserSplit(newUserSplit);\n\n    if (newUserSplit.length === word.length) {\n      setIsCheck(true);\n    }\n  };\n\n  const handleReturnCharacter = index => {\n    if (isCheck) {\n      setIsCheck(false);\n    }\n\n    const newUserSplit = userSplit.slice(0, index);\n    setUserSplit(newUserSplit);\n  };\n\n  const renderOriginSplit = () => {\n    return originSplit.current.map((ch, index) => {\n      const isSelected = userSplit.findIndex(item => index === item.index) !== -1;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.char} ${isSelected ? ` ${aniStyle.slideAni} disabled` : ''}`,\n        onClick: () => handleSelectCharacter(index),\n        children: isSelected ? '' : ch\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  const renderUserSplit = () => {\n    return userSplit.map((item, key) => {\n      const correctClass = item.ch === word.toLowerCase()[key] ? 'right' : 'wrong';\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.char} ${isCheck ? correctClass : ''}`,\n        onClick: () => handleReturnCharacter(key),\n        children: item.ch\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this);\n    });\n  }; // check is correct\n\n\n  useEffect(() => {\n    let isSub = true;\n\n    if (!isCheck) {\n      return;\n    }\n\n    const answer = userSplit.map(i => i.ch).join('');\n\n    if (answer.toLowerCase() === word.toLowerCase()) {\n      isSub && setIsCorrect(true);\n      onCorrect();\n    } else {\n      isSub && setIsCorrect(false);\n      onWrong();\n    }\n\n    return () => {\n      isSub = false;\n    };\n  }, [isCheck]); // reset when next or prev\n\n  useEffect(() => {\n    let isSub = true;\n\n    if (resetFlag === -1) {\n      return;\n    }\n\n    if (isSub) {\n      setIsCheck(false);\n      setIsCorrect(false);\n      setUserSplit([]);\n      originSplit.current = splitWord(word.toLowerCase());\n    }\n\n    return () => isSub = false;\n  }, [resetFlag]); // get word detail\n\n  useEffect(() => {\n    let isSub = true;\n\n    if (modal.show && modal.loading) {\n      (async function () {\n        try {\n          const apiRes = await wordApi.getWordDetails(word);\n\n          if (apiRes.status === 200 && isSub) {\n            setModal({\n              show: true,\n              loading: false,\n              data: { ...apiRes.data\n              }\n            });\n          }\n        } catch (error) {\n          isSub && setModal({\n            show: false,\n            loading: false,\n            data: null\n          });\n        }\n      })();\n    }\n\n    return () => isSub = false;\n  }, [modal]); // @rendering ...\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: userSplitId,\n      className: `${classes.split} flex-center`,\n      children: renderUserSplit()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-center-between my-4\",\n        children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n          title: \"Xem \\u0111\\xE1p \\xE1n\",\n          children: /*#__PURE__*/_jsxDEV(HelpIcon, {\n            className: `${classes.helpIcon} cur-pointer`,\n            onClick: () => setModal({\n              loading: true,\n              data: null,\n              show: true\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: `${classes.mean} t-center px-4`,\n          children: mean\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Speaker, {\n          className: classes.speaker,\n          text: word\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), isCheck && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: `${classes.answer} t-center ${isCorrect ? 'right' : 'wrong'}`,\n        children: isCorrect ? 'Chính xác' : 'Sai rồi'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes.split} flex-center`,\n      children: renderOriginSplit()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), modal.show && /*#__PURE__*/_jsxDEV(WordDetailModal, {\n      open: modal.show,\n      loading: modal.loading,\n      onClose: () => setModal({\n        loading: false,\n        data: null,\n        show: false\n      }),\n      ...modal.data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SplitWord, \"9R85WOEFb1tjcJhSROBhkCTYoc8=\", false, function () {\n  return [useStyle];\n});\n\n_c = SplitWord;\nSplitWord.propTypes = {\n  mean: PropTypes.string,\n  onCorrect: PropTypes.func,\n  onWrong: PropTypes.func,\n  resetFlag: PropTypes.number,\n  word: PropTypes.string\n};\nSplitWord.defaultProps = {\n  mean: '',\n  word: '',\n  onCorrect: function () {},\n  onWrong: function () {},\n  resetFlag: -1\n};\nexport default SplitWord;\n\nvar _c;\n\n$RefreshReg$(_c, \"SplitWord\");","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/PlayGames/WordMatch/SplitWord/index.js"],"names":["makeStyles","Tooltip","HelpIcon","wordApi","Speaker","WordDetailModal","PropTypes","React","useEffect","useRef","useState","useStyle","userSplitId","splitWord","word","splitArr","failFlag","split","sort","Math","random","join","SplitWord","mean","onCorrect","onWrong","resetFlag","originSplit","toLowerCase","userSplit","setUserSplit","isCorrect","setIsCorrect","isCheck","setIsCheck","modal","setModal","show","loading","data","classes","aniStyle","slideAni","position","top","content","length","ch","width","height","backgroundColor","animationName","animationDuration","animationFillMode","handleSelectCharacter","index","newUserSplit","current","handleReturnCharacter","slice","renderOriginSplit","map","isSelected","findIndex","item","char","renderUserSplit","key","correctClass","isSub","answer","i","apiRes","getWordDetails","status","error","root","helpIcon","speaker","propTypes","string","func","number","defaultProps"],"mappings":"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","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpIcon from '@material-ui/icons/LiveHelp';\nimport wordApi from 'apis/wordApi';\nimport Speaker from 'components/UI/Speaker';\nimport WordDetailModal from 'components/UI/WordDetailModal';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useRef, useState } from 'react';\nimport useStyle from './style';\nconst userSplitId = 'userSplitId';\n\nfunction splitWord(word = '') {\n  let splitArr = [];\n  let failFlag = 1;\n\n  while (failFlag) {\n    // Prevent infinite loop\n    if (failFlag >= 50) {\n      break;\n    }\n\n    splitArr = word.split('').sort(() => Math.random() - 0.5);\n\n    if (splitArr.join('') === word) {\n      failFlag++;\n    } else {\n      failFlag = 0;\n      break;\n    }\n  }\n\n  return splitArr;\n}\n\nfunction SplitWord({ word, mean, onCorrect, onWrong, resetFlag }) {\n  const originSplit = useRef(splitWord(word.toLowerCase()));\n  const [userSplit, setUserSplit] = useState([]);\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [isCheck, setIsCheck] = useState(false);\n  const [modal, setModal] = useState({\n    show: false,\n    loading: false,\n    data: null,\n  });\n  const classes = useStyle();\n\n  // animation for select a character\n  const aniStyle = makeStyles({\n    slideAni: {\n      position: 'relative',\n\n      '&:before': {\n        position: 'absolute',\n        top: 0,\n        content: `\"${userSplit[userSplit.length - 1]?.ch}\"`,\n        width: '100%',\n        height: '100%',\n        backgroundColor: 'var(--bg-color-accent)',\n\n        animationName: 'aniSlide',\n        animationDuration: '0.35s',\n        animationFillMode: 'forwards',\n      },\n    },\n  })();\n\n  const handleSelectCharacter = (index) => {\n    const newUserSplit = [\n      ...userSplit,\n      { index, ch: originSplit.current[index] },\n    ];\n    setUserSplit(newUserSplit);\n\n    if (newUserSplit.length === word.length) {\n      setIsCheck(true);\n    }\n  };\n\n  const handleReturnCharacter = (index) => {\n    if (isCheck) {\n      setIsCheck(false);\n    }\n\n    const newUserSplit = userSplit.slice(0, index);\n    setUserSplit(newUserSplit);\n  };\n\n  const renderOriginSplit = () => {\n    return originSplit.current.map((ch, index) => {\n      const isSelected =\n        userSplit.findIndex((item) => index === item.index) !== -1;\n\n      return (\n        <div\n          key={index}\n          className={`${classes.char} ${\n            isSelected ? ` ${aniStyle.slideAni} disabled` : ''\n          }`}\n          onClick={() => handleSelectCharacter(index)}>\n          {isSelected ? '' : ch}\n        </div>\n      );\n    });\n  };\n\n  const renderUserSplit = () => {\n    return userSplit.map((item, key) => {\n      const correctClass =\n        item.ch === word.toLowerCase()[key] ? 'right' : 'wrong';\n      return (\n        <div\n          key={key}\n          className={`${classes.char} ${isCheck ? correctClass : ''}`}\n          onClick={() => handleReturnCharacter(key)}>\n          {item.ch}\n        </div>\n      );\n    });\n  };\n\n  // check is correct\n  useEffect(() => {\n    let isSub = true;\n\n    if (!isCheck) {\n      return;\n    }\n\n    const answer = userSplit.map((i) => i.ch).join('');\n    if (answer.toLowerCase() === word.toLowerCase()) {\n      isSub && setIsCorrect(true);\n      onCorrect();\n    } else {\n      isSub && setIsCorrect(false);\n      onWrong();\n    }\n\n    return () => {\n      isSub = false;\n    };\n  }, [isCheck]);\n\n  // reset when next or prev\n  useEffect(() => {\n    let isSub = true;\n    if (resetFlag === -1) {\n      return;\n    }\n\n    if (isSub) {\n      setIsCheck(false);\n      setIsCorrect(false);\n      setUserSplit([]);\n      originSplit.current = splitWord(word.toLowerCase());\n    }\n\n    return () => (isSub = false);\n  }, [resetFlag]);\n\n  // get word detail\n  useEffect(() => {\n    let isSub = true;\n\n    if (modal.show && modal.loading) {\n      (async function () {\n        try {\n          const apiRes = await wordApi.getWordDetails(word);\n          if (apiRes.status === 200 && isSub) {\n            setModal({ show: true, loading: false, data: { ...apiRes.data } });\n          }\n        } catch (error) {\n          isSub && setModal({ show: false, loading: false, data: null });\n        }\n      })();\n    }\n\n    return () => (isSub = false);\n  }, [modal]);\n\n  // @rendering ...\n  return (\n    <div className={classes.root}>\n      <div id={userSplitId} className={`${classes.split} flex-center`}>\n        {renderUserSplit()}\n      </div>\n\n      <div>\n        <div className=\"flex-center-between my-4\">\n          <Tooltip title=\"Xem đáp án\">\n            <HelpIcon\n              className={`${classes.helpIcon} cur-pointer`}\n              onClick={() =>\n                setModal({ loading: true, data: null, show: true })\n              }\n            />\n          </Tooltip>\n          <p className={`${classes.mean} t-center px-4`}>{mean}</p>\n          <Speaker className={classes.speaker} text={word} />\n        </div>\n        {isCheck && (\n          <p\n            className={`${classes.answer} t-center ${\n              isCorrect ? 'right' : 'wrong'\n            }`}>\n            {isCorrect ? 'Chính xác' : 'Sai rồi'}\n          </p>\n        )}\n      </div>\n\n      <div className={`${classes.split} flex-center`}>\n        {renderOriginSplit()}\n      </div>\n\n      {/* word detail modal */}\n      {modal.show && (\n        <WordDetailModal\n          open={modal.show}\n          loading={modal.loading}\n          onClose={() => setModal({ loading: false, data: null, show: false })}\n          {...modal.data}\n        />\n      )}\n    </div>\n  );\n}\n\nSplitWord.propTypes = {\n  mean: PropTypes.string,\n  onCorrect: PropTypes.func,\n  onWrong: PropTypes.func,\n  resetFlag: PropTypes.number,\n  word: PropTypes.string,\n};\n\nSplitWord.defaultProps = {\n  mean: '',\n  word: '',\n  onCorrect: function () {},\n  onWrong: function () {},\n  resetFlag: -1,\n};\n\nexport default SplitWord;\n"]},"metadata":{},"sourceType":"module"}