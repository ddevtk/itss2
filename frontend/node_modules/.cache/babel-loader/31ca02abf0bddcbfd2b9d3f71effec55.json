{"ast":null,"code":"var _jsxFileName = \"/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/Contribution/Sentence/data.js\",\n    _s = $RefreshSig$();\n\nimport sentenceApi from 'apis/sentenceApi';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setMessage } from 'redux/slices/message.slice';\nimport SentenceContribution from './index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SentenceContributionData() {\n  _s();\n\n  const [submitting, setSubmitting] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleSubmit = async formData => {\n    const {\n      sentence,\n      mean,\n      note,\n      topics\n    } = formData;\n\n    try {\n      setSubmitting(true);\n      const apiRes = await sentenceApi.postContributeSentence(sentence, mean, note, topics);\n\n      if (apiRes.status === 200) {\n        dispatch(setMessage({\n          type: 'success',\n          message: 'Thêm thành công, đang chờ xét duyệt. Cảm ơn sự đóng góp của bạn ❤',\n          duration: 5000\n        }));\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Thêm câu mới không thành công, thử lại';\n      dispatch(setMessage({\n        type: 'error',\n        message\n      }));\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(SentenceContribution, {\n    submitting: submitting,\n    onSubmitForm: handleSubmit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SentenceContributionData, \"5iB+qujXnQj6jBoSGKljUlKKZP8=\", false, function () {\n  return [useDispatch];\n});\n\n_c = SentenceContributionData;\nexport default SentenceContributionData;\n\nvar _c;\n\n$RefreshReg$(_c, \"SentenceContributionData\");","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/Contribution/Sentence/data.js"],"names":["sentenceApi","React","useState","useDispatch","setMessage","SentenceContribution","SentenceContributionData","submitting","setSubmitting","dispatch","handleSubmit","formData","sentence","mean","note","topics","apiRes","postContributeSentence","status","type","message","duration","error","response","data"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,kBAAxB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,4BAA3B;AACA,OAAOC,oBAAP,MAAiC,SAAjC;;;AAEA,SAASC,wBAAT,GAAoC;AAAA;;AAClC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAMO,QAAQ,GAAGN,WAAW,EAA5B;;AAEA,QAAMO,YAAY,GAAG,MAAOC,QAAP,IAAoB;AACvC,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA,IAAZ;AAAkBC,MAAAA,IAAlB;AAAwBC,MAAAA;AAAxB,QAAmCJ,QAAzC;;AACA,QAAI;AACFH,MAAAA,aAAa,CAAC,IAAD,CAAb;AAEA,YAAMQ,MAAM,GAAG,MAAMhB,WAAW,CAACiB,sBAAZ,CACnBL,QADmB,EAEnBC,IAFmB,EAGnBC,IAHmB,EAInBC,MAJmB,CAArB;;AAMA,UAAIC,MAAM,CAACE,MAAP,KAAkB,GAAtB,EAA2B;AACzBT,QAAAA,QAAQ,CACNL,UAAU,CAAC;AACTe,UAAAA,IAAI,EAAE,SADG;AAETC,UAAAA,OAAO,EACL,mEAHO;AAITC,UAAAA,QAAQ,EAAE;AAJD,SAAD,CADJ,CAAR;AAQD;AACF,KAnBD,CAmBE,OAAOC,KAAP,EAAc;AAAA;;AACd,YAAMF,OAAO,GACX,oBAAAE,KAAK,CAACC,QAAN,4FAAgBC,IAAhB,8EAAsBJ,OAAtB,KACA,wCAFF;AAGAX,MAAAA,QAAQ,CACNL,UAAU,CAAC;AACTe,QAAAA,IAAI,EAAE,OADG;AAETC,QAAAA;AAFS,OAAD,CADJ,CAAR;AAMD,KA7BD,SA6BU;AACRZ,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,GAlCD;;AAoCA,sBACE,QAAC,oBAAD;AAAsB,IAAA,UAAU,EAAED,UAAlC;AAA8C,IAAA,YAAY,EAAEG;AAA5D;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;GA3CQJ,wB;UAEUH,W;;;KAFVG,wB;AA6CT,eAAeA,wBAAf","sourcesContent":["import sentenceApi from 'apis/sentenceApi';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setMessage } from 'redux/slices/message.slice';\nimport SentenceContribution from './index';\n\nfunction SentenceContributionData() {\n  const [submitting, setSubmitting] = useState(false);\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (formData) => {\n    const { sentence, mean, note, topics } = formData;\n    try {\n      setSubmitting(true);\n\n      const apiRes = await sentenceApi.postContributeSentence(\n        sentence,\n        mean,\n        note,\n        topics,\n      );\n      if (apiRes.status === 200) {\n        dispatch(\n          setMessage({\n            type: 'success',\n            message:\n              'Thêm thành công, đang chờ xét duyệt. Cảm ơn sự đóng góp của bạn ❤',\n            duration: 5000,\n          }),\n        );\n      }\n    } catch (error) {\n      const message =\n        error.response?.data?.message ||\n        'Thêm câu mới không thành công, thử lại';\n      dispatch(\n        setMessage({\n          type: 'error',\n          message,\n        }),\n      );\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <SentenceContribution submitting={submitting} onSubmitForm={handleSubmit} />\n  );\n}\n\nexport default SentenceContributionData;\n"]},"metadata":{},"sourceType":"module"}