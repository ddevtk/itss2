{"ast":null,"code":"var _jsxFileName = \"/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/DynoDictionary/Item/data.js\",\n    _s = $RefreshSig$();\n\nimport wordApi from 'apis/wordApi';\nimport WordDetailModal from 'components/UI/WordDetailModal';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setMessage } from 'redux/slices/message.slice';\nimport DynoDictionaryItem from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction DynoDictionaryItemData(props) {\n  _s();\n\n  const [modal, setModal] = useState({\n    loading: false,\n    open: false\n  });\n  const dispatch = useDispatch();\n\n  const onShowDetail = async word => {\n    try {\n      setModal({\n        open: true,\n        loading: true\n      });\n      const apiRes = await wordApi.getWordDetails(word);\n\n      if (apiRes.status === 200) {\n        setModal({\n          open: true,\n          loading: false,\n          ...apiRes.data\n        });\n      }\n    } catch (error) {\n      setModal({\n        open: false,\n        loading: false\n      });\n      dispatch(setMessage({\n        type: 'error',\n        message: 'Không thể lấy thông tin, thử lại.'\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DynoDictionaryItem, { ...props,\n      onShowDetail: onShowDetail\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), modal.open && /*#__PURE__*/_jsxDEV(WordDetailModal, { ...modal,\n      onClose: () => setModal({\n        open: false,\n        loading: false\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(DynoDictionaryItemData, \"gL0252OsbiAnfLWO0vixCbqYh8k=\", false, function () {\n  return [useDispatch];\n});\n\n_c = DynoDictionaryItemData;\nexport default DynoDictionaryItemData;\n\nvar _c;\n\n$RefreshReg$(_c, \"DynoDictionaryItemData\");","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/DynoDictionary/Item/data.js"],"names":["wordApi","WordDetailModal","React","useState","useDispatch","setMessage","DynoDictionaryItem","DynoDictionaryItemData","props","modal","setModal","loading","open","dispatch","onShowDetail","word","apiRes","getWordDetails","status","data","error","type","message"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,4BAA3B;AACA,OAAOC,kBAAP,MAA+B,GAA/B;;;;AAEA,SAASC,sBAAT,CAAgCC,KAAhC,EAAuC;AAAA;;AACrC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC;AAAEQ,IAAAA,OAAO,EAAE,KAAX;AAAkBC,IAAAA,IAAI,EAAE;AAAxB,GAAD,CAAlC;AACA,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;;AAEA,QAAMU,YAAY,GAAG,MAAOC,IAAP,IAAgB;AACnC,QAAI;AACFL,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAE,IAAR;AAAcD,QAAAA,OAAO,EAAE;AAAvB,OAAD,CAAR;AACA,YAAMK,MAAM,GAAG,MAAMhB,OAAO,CAACiB,cAAR,CAAuBF,IAAvB,CAArB;;AACA,UAAIC,MAAM,CAACE,MAAP,KAAkB,GAAtB,EAA2B;AACzBR,QAAAA,QAAQ,CAAC;AAAEE,UAAAA,IAAI,EAAE,IAAR;AAAcD,UAAAA,OAAO,EAAE,KAAvB;AAA8B,aAAGK,MAAM,CAACG;AAAxC,SAAD,CAAR;AACD;AACF,KAND,CAME,OAAOC,KAAP,EAAc;AACdV,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAE,KAAR;AAAeD,QAAAA,OAAO,EAAE;AAAxB,OAAD,CAAR;AACAE,MAAAA,QAAQ,CACNR,UAAU,CAAC;AACTgB,QAAAA,IAAI,EAAE,OADG;AAETC,QAAAA,OAAO,EAAE;AAFA,OAAD,CADJ,CAAR;AAMD;AACF,GAhBD;;AAkBA,sBACE;AAAA,4BACE,QAAC,kBAAD,OAAwBd,KAAxB;AAA+B,MAAA,YAAY,EAAEM;AAA7C;AAAA;AAAA;AAAA;AAAA,YADF,EAGGL,KAAK,CAACG,IAAN,iBACC,QAAC,eAAD,OACMH,KADN;AAEE,MAAA,OAAO,EAAE,MAAMC,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAE,KAAR;AAAeD,QAAAA,OAAO,EAAE;AAAxB,OAAD;AAFzB;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA,kBADF;AAYD;;GAlCQJ,sB;UAEUH,W;;;KAFVG,sB;AAoCT,eAAeA,sBAAf","sourcesContent":["import wordApi from 'apis/wordApi';\nimport WordDetailModal from 'components/UI/WordDetailModal';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setMessage } from 'redux/slices/message.slice';\nimport DynoDictionaryItem from '.';\n\nfunction DynoDictionaryItemData(props) {\n  const [modal, setModal] = useState({ loading: false, open: false });\n  const dispatch = useDispatch();\n\n  const onShowDetail = async (word) => {\n    try {\n      setModal({ open: true, loading: true });\n      const apiRes = await wordApi.getWordDetails(word);\n      if (apiRes.status === 200) {\n        setModal({ open: true, loading: false, ...apiRes.data });\n      }\n    } catch (error) {\n      setModal({ open: false, loading: false });\n      dispatch(\n        setMessage({\n          type: 'error',\n          message: 'Không thể lấy thông tin, thử lại.',\n        }),\n      );\n    }\n  };\n\n  return (\n    <>\n      <DynoDictionaryItem {...props} onShowDetail={onShowDetail} />\n\n      {modal.open && (\n        <WordDetailModal\n          {...modal}\n          onClose={() => setModal({ open: false, loading: false })}\n        />\n      )}\n    </>\n  );\n}\n\nexport default DynoDictionaryItemData;\n"]},"metadata":{},"sourceType":"module"}