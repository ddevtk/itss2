{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport accountApi from 'apis/accountApi';\nexport const getUserInfo = createAsyncThunk('userInfo/getUserInfo', async () => {\n  try {\n    const apiRes = await accountApi.getUserInfo();\n\n    if (apiRes && apiRes.status === 200) {\n      return apiRes.data.user;\n    }\n\n    return {};\n  } catch (error) {\n    throw error;\n  }\n});\nconst userInfoSlice = createSlice({\n  name: 'userInfo',\n  initialState: {\n    isAuth: false,\n    name: '',\n    username: '',\n    avt: '',\n    favoriteList: [],\n    coin: 0\n  },\n  reducers: {\n    setAddFavorites(state, action) {\n      const {\n        word,\n        isAdd = true\n      } = action.payload;\n\n      if (isAdd) {\n        state.favoriteList.push(word);\n      } else {\n        state.favoriteList = state.favoriteList.filter(i => i !== word);\n      }\n    },\n\n    setUserCoin(state, action) {\n      state.coin = action.payload;\n    },\n\n    setUserAvt(state, action) {\n      state.avt = action.payload;\n    }\n\n  },\n  extraReducers: {\n    [getUserInfo.fulfilled]: (state, action) => {\n      const {\n        username,\n        name,\n        avt,\n        coin,\n        favoriteList\n      } = action.payload;\n\n      if (!username || username === '') {\n        state.isAuth = false;\n        return;\n      }\n\n      return {\n        isAuth: true,\n        username,\n        name,\n        avt,\n        coin,\n        favoriteList\n      };\n    }\n  }\n});\nconst {\n  reducer,\n  actions\n} = userInfoSlice;\nexport const {\n  setAddFavorites,\n  setUserCoin,\n  setUserAvt\n} = actions;\nexport default reducer;","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-english/frontend/src/redux/slices/userInfo.slice.js"],"names":["createAsyncThunk","createSlice","accountApi","getUserInfo","apiRes","status","data","user","error","userInfoSlice","name","initialState","isAuth","username","avt","favoriteList","coin","reducers","setAddFavorites","state","action","word","isAdd","payload","push","filter","i","setUserCoin","setUserAvt","extraReducers","fulfilled","reducer","actions"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AAEA,OAAO,MAAMC,WAAW,GAAGH,gBAAgB,CACzC,sBADyC,EAEzC,YAAY;AACV,MAAI;AACF,UAAMI,MAAM,GAAG,MAAMF,UAAU,CAACC,WAAX,EAArB;;AACA,QAAIC,MAAM,IAAIA,MAAM,CAACC,MAAP,KAAkB,GAAhC,EAAqC;AACnC,aAAOD,MAAM,CAACE,IAAP,CAAYC,IAAnB;AACD;;AACD,WAAO,EAAP;AACD,GAND,CAME,OAAOC,KAAP,EAAc;AACd,UAAMA,KAAN;AACD;AACF,CAZwC,CAApC;AAeP,MAAMC,aAAa,GAAGR,WAAW,CAAC;AAChCS,EAAAA,IAAI,EAAE,UAD0B;AAEhCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,MAAM,EAAE,KADI;AAEZF,IAAAA,IAAI,EAAE,EAFM;AAGZG,IAAAA,QAAQ,EAAE,EAHE;AAIZC,IAAAA,GAAG,EAAE,EAJO;AAKZC,IAAAA,YAAY,EAAE,EALF;AAMZC,IAAAA,IAAI,EAAE;AANM,GAFkB;AAUhCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,eAAe,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC7B,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA,KAAK,GAAG;AAAhB,UAAyBF,MAAM,CAACG,OAAtC;;AAEA,UAAID,KAAJ,EAAW;AACTH,QAAAA,KAAK,CAACJ,YAAN,CAAmBS,IAAnB,CAAwBH,IAAxB;AACD,OAFD,MAEO;AACLF,QAAAA,KAAK,CAACJ,YAAN,GAAqBI,KAAK,CAACJ,YAAN,CAAmBU,MAAnB,CAA2BC,CAAD,IAAOA,CAAC,KAAKL,IAAvC,CAArB;AACD;AACF,KATO;;AAWRM,IAAAA,WAAW,CAACR,KAAD,EAAQC,MAAR,EAAgB;AACzBD,MAAAA,KAAK,CAACH,IAAN,GAAaI,MAAM,CAACG,OAApB;AACD,KAbO;;AAeRK,IAAAA,UAAU,CAACT,KAAD,EAAQC,MAAR,EAAgB;AACxBD,MAAAA,KAAK,CAACL,GAAN,GAAYM,MAAM,CAACG,OAAnB;AACD;;AAjBO,GAVsB;AA6BhCM,EAAAA,aAAa,EAAE;AACb,KAAC1B,WAAW,CAAC2B,SAAb,GAAyB,CAACX,KAAD,EAAQC,MAAR,KAAmB;AAC1C,YAAM;AAAEP,QAAAA,QAAF;AAAYH,QAAAA,IAAZ;AAAkBI,QAAAA,GAAlB;AAAuBE,QAAAA,IAAvB;AAA6BD,QAAAA;AAA7B,UAA8CK,MAAM,CAACG,OAA3D;;AACA,UAAI,CAACV,QAAD,IAAaA,QAAQ,KAAK,EAA9B,EAAkC;AAChCM,QAAAA,KAAK,CAACP,MAAN,GAAe,KAAf;AACA;AACD;;AACD,aAAO;AAAEA,QAAAA,MAAM,EAAE,IAAV;AAAgBC,QAAAA,QAAhB;AAA0BH,QAAAA,IAA1B;AAAgCI,QAAAA,GAAhC;AAAqCE,QAAAA,IAArC;AAA2CD,QAAAA;AAA3C,OAAP;AACD;AARY;AA7BiB,CAAD,CAAjC;AAyCA,MAAM;AAAEgB,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBvB,aAA7B;AACA,OAAO,MAAM;AAAES,EAAAA,eAAF;AAAmBS,EAAAA,WAAnB;AAAgCC,EAAAA;AAAhC,IAA+CI,OAArD;AACP,eAAeD,OAAf","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport accountApi from 'apis/accountApi';\n\nexport const getUserInfo = createAsyncThunk(\n  'userInfo/getUserInfo',\n  async () => {\n    try {\n      const apiRes = await accountApi.getUserInfo();\n      if (apiRes && apiRes.status === 200) {\n        return apiRes.data.user;\n      }\n      return {};\n    } catch (error) {\n      throw error;\n    }\n  },\n);\n\nconst userInfoSlice = createSlice({\n  name: 'userInfo',\n  initialState: {\n    isAuth: false,\n    name: '',\n    username: '',\n    avt: '',\n    favoriteList: [],\n    coin: 0,\n  },\n  reducers: {\n    setAddFavorites(state, action) {\n      const { word, isAdd = true } = action.payload;\n\n      if (isAdd) {\n        state.favoriteList.push(word);\n      } else {\n        state.favoriteList = state.favoriteList.filter((i) => i !== word);\n      }\n    },\n\n    setUserCoin(state, action) {\n      state.coin = action.payload;\n    },\n\n    setUserAvt(state, action) {\n      state.avt = action.payload;\n    },\n  },\n  extraReducers: {\n    [getUserInfo.fulfilled]: (state, action) => {\n      const { username, name, avt, coin, favoriteList } = action.payload;\n      if (!username || username === '') {\n        state.isAuth = false;\n        return;\n      }\n      return { isAuth: true, username, name, avt, coin, favoriteList };\n    },\n  },\n});\n\nconst { reducer, actions } = userInfoSlice;\nexport const { setAddFavorites, setUserCoin, setUserAvt } = actions;\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}