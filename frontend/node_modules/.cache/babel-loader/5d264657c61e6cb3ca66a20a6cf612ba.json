{"ast":null,"code":"var _jsxFileName = \"/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/ForgotPassword/data.js\",\n    _s = $RefreshSig$();\n\nimport accountApi from 'apis/accountApi';\nimport { ROUTES, UX } from 'constant';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { setMessage } from 'redux/slices/message.slice';\nimport ForgotPassword from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ForgotPasswordData() {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [mailSending, setMailSending] = useState(false);\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const handleSendMail = async email => {\n    setMailSending(true);\n\n    try {\n      const apiRes = await accountApi.getSendVerifyCode(email);\n\n      if (apiRes.status === 200) {\n        dispatch(setMessage({\n          type: 'success',\n          message: 'Gửi mã thành công. Hãy kiểm tra email của bạn'\n        }));\n      }\n    } catch (error) {} finally {\n      setMailSending(false);\n    }\n  };\n\n  const handleResetPassword = async _ref => {\n    let {\n      email,\n      verifyCode,\n      password\n    } = _ref;\n    setLoading(true);\n    setMailSending(true);\n\n    try {\n      const apiRes = await accountApi.postResetPassword(email, password, verifyCode);\n\n      if (apiRes.status === 200) {\n        dispatch(setMessage({\n          type: 'success',\n          message: 'Đổi mật khẩu thành công',\n          duration: UX.DELAY_TIME\n        }));\n        setTimeout(() => {\n          history.push(ROUTES.LOGIN);\n        }, UX.DELAY_TIME);\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Đổi mật khẩu thất bại, thử lại !';\n      dispatch(setMessage({\n        type: 'error',\n        message\n      }));\n    } finally {\n      setLoading(false);\n      setMailSending(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ForgotPassword, {\n    loading: loading,\n    mailSending: mailSending,\n    onSendVerifyCode: handleSendMail,\n    onSubmit: handleResetPassword\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ForgotPasswordData, \"hY3t4Yh8p2CpZAAHMRAq/BxBJ98=\", false, function () {\n  return [useDispatch, useHistory];\n});\n\n_c = ForgotPasswordData;\nexport default ForgotPasswordData;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForgotPasswordData\");","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-japanese/frontend/src/components/ForgotPassword/data.js"],"names":["accountApi","ROUTES","UX","React","useState","useDispatch","useHistory","setMessage","ForgotPassword","ForgotPasswordData","loading","setLoading","mailSending","setMailSending","dispatch","history","handleSendMail","email","apiRes","getSendVerifyCode","status","type","message","error","handleResetPassword","verifyCode","password","postResetPassword","duration","DELAY_TIME","setTimeout","push","LOGIN","response","data"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,iBAAvB;AACA,SAASC,MAAT,EAAiBC,EAAjB,QAA2B,UAA3B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,UAAT,QAA2B,4BAA3B;AACA,OAAOC,cAAP,MAA2B,GAA3B;;;AAEA,SAASC,kBAAT,GAA8B;AAAA;;AAC5B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAMU,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,OAAO,GAAGT,UAAU,EAA1B;;AAEA,QAAMU,cAAc,GAAG,MAAOC,KAAP,IAAiB;AACtCJ,IAAAA,cAAc,CAAC,IAAD,CAAd;;AACA,QAAI;AACF,YAAMK,MAAM,GAAG,MAAMlB,UAAU,CAACmB,iBAAX,CAA6BF,KAA7B,CAArB;;AACA,UAAIC,MAAM,CAACE,MAAP,KAAkB,GAAtB,EAA2B;AACzBN,QAAAA,QAAQ,CACNP,UAAU,CAAC;AACTc,UAAAA,IAAI,EAAE,SADG;AAETC,UAAAA,OAAO,EAAE;AAFA,SAAD,CADJ,CAAR;AAMD;AACF,KAVD,CAUE,OAAOC,KAAP,EAAc,CACf,CAXD,SAWU;AACRV,MAAAA,cAAc,CAAC,KAAD,CAAd;AACD;AACF,GAhBD;;AAkBA,QAAMW,mBAAmB,GAAG,cAA2C;AAAA,QAApC;AAAEP,MAAAA,KAAF;AAASQ,MAAAA,UAAT;AAAqBC,MAAAA;AAArB,KAAoC;AACrEf,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,IAAAA,cAAc,CAAC,IAAD,CAAd;;AACA,QAAI;AACF,YAAMK,MAAM,GAAG,MAAMlB,UAAU,CAAC2B,iBAAX,CACnBV,KADmB,EAEnBS,QAFmB,EAGnBD,UAHmB,CAArB;;AAMA,UAAIP,MAAM,CAACE,MAAP,KAAkB,GAAtB,EAA2B;AACzBN,QAAAA,QAAQ,CACNP,UAAU,CAAC;AACTc,UAAAA,IAAI,EAAE,SADG;AAETC,UAAAA,OAAO,EAAE,yBAFA;AAGTM,UAAAA,QAAQ,EAAE1B,EAAE,CAAC2B;AAHJ,SAAD,CADJ,CAAR;AAOAC,QAAAA,UAAU,CAAC,MAAM;AACff,UAAAA,OAAO,CAACgB,IAAR,CAAa9B,MAAM,CAAC+B,KAApB;AACD,SAFS,EAEP9B,EAAE,CAAC2B,UAFI,CAAV;AAGD;AACF,KAnBD,CAmBE,OAAON,KAAP,EAAc;AAAA;;AACd,YAAMD,OAAO,GACX,oBAAAC,KAAK,CAACU,QAAN,4FAAgBC,IAAhB,8EAAsBZ,OAAtB,KAAiC,kCADnC;AAEAR,MAAAA,QAAQ,CACNP,UAAU,CAAC;AACTc,QAAAA,IAAI,EAAE,OADG;AAETC,QAAAA;AAFS,OAAD,CADJ,CAAR;AAMD,KA5BD,SA4BU;AACRX,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,cAAc,CAAC,KAAD,CAAd;AACD;AACF,GAnCD;;AAqCA,sBACE,QAAC,cAAD;AACE,IAAA,OAAO,EAAEH,OADX;AAEE,IAAA,WAAW,EAAEE,WAFf;AAGE,IAAA,gBAAgB,EAAEI,cAHpB;AAIE,IAAA,QAAQ,EAAEQ;AAJZ;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GArEQf,kB;UAGUJ,W,EACDC,U;;;KAJTG,kB;AAuET,eAAeA,kBAAf","sourcesContent":["import accountApi from 'apis/accountApi';\nimport { ROUTES, UX } from 'constant';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { setMessage } from 'redux/slices/message.slice';\nimport ForgotPassword from '.';\n\nfunction ForgotPasswordData() {\n  const [loading, setLoading] = useState(false);\n  const [mailSending, setMailSending] = useState(false);\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const handleSendMail = async (email) => {\n    setMailSending(true);\n    try {\n      const apiRes = await accountApi.getSendVerifyCode(email);\n      if (apiRes.status === 200) {\n        dispatch(\n          setMessage({\n            type: 'success',\n            message: 'Gửi mã thành công. Hãy kiểm tra email của bạn',\n          }),\n        );\n      }\n    } catch (error) {\n    } finally {\n      setMailSending(false);\n    }\n  };\n\n  const handleResetPassword = async ({ email, verifyCode, password }) => {\n    setLoading(true);\n    setMailSending(true);\n    try {\n      const apiRes = await accountApi.postResetPassword(\n        email,\n        password,\n        verifyCode,\n      );\n\n      if (apiRes.status === 200) {\n        dispatch(\n          setMessage({\n            type: 'success',\n            message: 'Đổi mật khẩu thành công',\n            duration: UX.DELAY_TIME,\n          }),\n        );\n        setTimeout(() => {\n          history.push(ROUTES.LOGIN);\n        }, UX.DELAY_TIME);\n      }\n    } catch (error) {\n      const message =\n        error.response?.data?.message || 'Đổi mật khẩu thất bại, thử lại !';\n      dispatch(\n        setMessage({\n          type: 'error',\n          message,\n        }),\n      );\n    } finally {\n      setLoading(false);\n      setMailSending(false);\n    }\n  };\n\n  return (\n    <ForgotPassword\n      loading={loading}\n      mailSending={mailSending}\n      onSendVerifyCode={handleSendMail}\n      onSubmit={handleResetPassword}\n    />\n  );\n}\n\nexport default ForgotPasswordData;\n"]},"metadata":{},"sourceType":"module"}