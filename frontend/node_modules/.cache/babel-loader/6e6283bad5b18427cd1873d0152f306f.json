{"ast":null,"code":"import axiosClient from './axiosClient';\nconst URL = '/account';\nconst accountApi = {\n  postRegisterAccount: (email, name, password) => {\n    return axiosClient.post(`${URL}/register`, {\n      email,\n      name,\n      password\n    });\n  },\n  postLogin: (email, password) => {\n    return axiosClient.post(`${URL}/login`, {\n      email,\n      password\n    });\n  },\n  postLoginWithGoogle: access_token => {\n    return axiosClient.post(`${URL}/login-gg`, {\n      access_token\n    });\n  },\n  postLoginWithFacebook: access_token => {\n    return axiosClient.post(`${URL}/login-fb`, {\n      access_token\n    });\n  },\n  postLogout: () => {\n    return axiosClient.post(`${URL}/logout`);\n  },\n  postResetPassword: (email, password, verifyCode) => {\n    return axiosClient.post(`${URL}/reset-password`, {\n      email,\n      password,\n      verifyCode\n    });\n  },\n  putToggleWordFavorite: (username, word, isAdd) => {\n    return axiosClient.put(`${URL}/toggle-favorite`, {\n      username,\n      word,\n      isAdd\n    });\n  },\n  putUpdateUserCoin: newCoin => {\n    return axiosClient.put(`${URL}/update-coin`, {\n      newCoin\n    });\n  },\n  putUpdateAvt: function () {\n    let avtSrc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return axiosClient.put(`${URL}/update-avt`, {\n      avtSrc\n    });\n  },\n  putUpdateProfile: function () {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let username = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    return axiosClient.put(`${URL}/update-profile`, {\n      name,\n      username\n    });\n  },\n  getUserInfo: () => {\n    return axiosClient.get(`${URL}/user-info`);\n  },\n  getSendVerifyCode: email => {\n    return axiosClient.get(`${URL}/send-verify-code`, {\n      params: {\n        email\n      }\n    });\n  },\n  getUserProfile: () => {\n    return axiosClient.get(`${URL}/user-profile`);\n  }\n};\nexport default accountApi;","map":{"version":3,"sources":["/Users/doviethoang/Desktop/github/dynonary-english/frontend/src/apis/accountApi.js"],"names":["axiosClient","URL","accountApi","postRegisterAccount","email","name","password","post","postLogin","postLoginWithGoogle","access_token","postLoginWithFacebook","postLogout","postResetPassword","verifyCode","putToggleWordFavorite","username","word","isAdd","put","putUpdateUserCoin","newCoin","putUpdateAvt","avtSrc","putUpdateProfile","getUserInfo","get","getSendVerifyCode","params","getUserProfile"],"mappings":"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","sourcesContent":["import axiosClient from './axiosClient';\n\nconst URL = '/account';\n\nconst accountApi = {\n  postRegisterAccount: (email, name, password) => {\n    return axiosClient.post(`${URL}/register`, { email, name, password });\n  },\n\n  postLogin: (email, password) => {\n    return axiosClient.post(`${URL}/login`, { email, password });\n  },\n\n  postLoginWithGoogle: (access_token) => {\n    return axiosClient.post(`${URL}/login-gg`, { access_token });\n  },\n\n  postLoginWithFacebook: (access_token) => {\n    return axiosClient.post(`${URL}/login-fb`, { access_token });\n  },\n\n  postLogout: () => {\n    return axiosClient.post(`${URL}/logout`);\n  },\n\n  postResetPassword: (email, password, verifyCode) => {\n    return axiosClient.post(`${URL}/reset-password`, {\n      email,\n      password,\n      verifyCode,\n    });\n  },\n\n  putToggleWordFavorite: (username, word, isAdd) => {\n    return axiosClient.put(`${URL}/toggle-favorite`, { username, word, isAdd });\n  },\n\n  putUpdateUserCoin: (newCoin) => {\n    return axiosClient.put(`${URL}/update-coin`, { newCoin });\n  },\n\n  putUpdateAvt: (avtSrc = '') => {\n    return axiosClient.put(`${URL}/update-avt`, { avtSrc });\n  },\n\n  putUpdateProfile: (name = '', username = '') => {\n    return axiosClient.put(`${URL}/update-profile`, { name, username });\n  },\n\n  getUserInfo: () => {\n    return axiosClient.get(`${URL}/user-info`);\n  },\n\n  getSendVerifyCode: (email) => {\n    return axiosClient.get(`${URL}/send-verify-code`, {\n      params: { email },\n    });\n  },\n\n  getUserProfile: () => {\n    return axiosClient.get(`${URL}/user-profile`);\n  },\n};\n\nexport default accountApi;\n"]},"metadata":{},"sourceType":"module"}